---
alwaysApply: true
---

Системная инструкция - Telegram Bot "Ultron"

Обзор проекта

Ultron - это многофункциональный Telegram-бот для модерации групп с интеграцией ИИ-помощника. Построен на модульной архитектуре с использованием TypeScript, Node.js, PostgreSQL и Redis.

Архитектура системы

Core принципы:
- Модульность: Четкое разделение ответственности между сервисами
- Dependency Injection: Централизованное управление зависимостями через Container
- Graceful Shutdown: Корректная остановка всех сервисов
- Observability: Структурированное логирование и мониторинг

Основные слои:
Application Layer (app.ts) 
    ↓
Core Layer (Container, Application)
    ↓
Services Layer (Business Logic)
    ↓
Repository Layer (Data Access)
    ↓
Infrastructure Layer (Database, Redis, Docker)

Основные функции и бизнес-логика

1. Система капчи (CaptchaService)
- Цель: Проверка новых участников математическими примерами
- Триггеры: События chat_member и new_chat_members
- Логика:
  - Генерация примера (числа 1-10, сложение)
  - Создание InlineKeyboard с 4 вариантами ответа
  - Ограничение пользователя (can_send_messages: false)
  - Таймаут 60 секунд
  - Правильный ответ → снятие ограничений
  - Неправильный/таймаут → бан на 60 секунд с автоматическим разбаном
- Техническая реализация: Двухэтапное ограничение через Telegram API:
  1. Первый запрос: установка бана с until_date = текущее время + 60 секунд
  2. Второй запрос: автоматический разбан через 60 секунд

2. Антиспам система (AntiSpamService)
- Цель: Фильтрация спам-сообщений у новых пользователей
- Логика:
  - Проверка только первых 5 сообщений пользователя
  - Интеграция с внешним API (порт 6323)
  - Градация наказаний: предупреждение → кик → бан
  - Очистка счетчиков через час
- Хранение данных: Счетчики сообщений для пользователей хранятся в Redis для быстрого доступа и автоматической очистки

3. ИИ-чат (AIChatService)
- Провайдер: Google Gemini
- Активация: Упоминание бота, ответ на сообщение бота
- Особенности:
  - Система очередей для обработки запросов
  - Адаптивное throttling (5-20 сек задержки)
  - Контекстная память (500 сообщений)
  - Персонализация через системные промпты

4. Модерация
- Команды: /ban, /unban, /mute, /unmute
- Права: Только администраторы групп
- Поддержка: Username и reply-to-message форматы
- Ограничения: Команды без username работают только в публичных чатах (через reply-to-message)

5. Управление группами
- Регистрация: /register - добавление группы в систему
- Настройка ИИ: /addAltronKey - подключение Gemini API (только в приватном чате с ботом)
- Переключение: /ultron - вкл/выкл ИИ функций

Структура данных

Основные таблицы:
- chats (id, type, title, active, created_at, updated_at) - Базовая информация о чатах
- chat_configs (chat_id, gemini_api_key, system_prompt, ai_enabled) - Конфигурация ИИ
- group_admins (group_id, user_id, created_at) - Администраторы групп

Кеширование (Redis):
- Bot info: Информация о боте
- Chat contexts: Контексты разговоров ИИ
- User counters: Счетчики сообщений для антиспама
- TTL: 5-24 часа в зависимости от типа данных

Конфигурация и настройки

Переменные окружения:
- BOT_TOKEN - Токен Telegram бота
- DATABASE_URL - PostgreSQL connection string
- REDIS_URL - Redis connection string
- ANTISPAM_URL - URL антиспам API
- WEATHER_API_KEY - OpenWeatherMap API (опционально)
- GEMINI_API_KEY - Google Gemini API (по умолчанию)
- WEB_SERVER_PORT=3000 - Порт для API мониторинга

Константы (constants.ts):
- BOT_CONFIG: Таймауты, интервалы, лимиты
- AI_CHAT_CONFIG: Настройки ИИ и очередей
- ANTI_SPAM_CONFIG: Параметры антиспам системы
- CACHE_CONFIG: TTL и префиксы кеша

Инфраструктура

Docker Compose services:
- postgres: База данных
- redis: Кеширование
- antispam: Внешний API антиспама
- pgadmin: Администрирование БД (опционально)

Скрипты управления:
- start.sh - Запуск инфраструктуры
- stop.sh - Остановка сервисов
- monitor.sh - Мониторинг состояния
- backup.sh - Резервное копирование

Мониторинг и логирование

Веб API (ApiServerService):
- Endpoint: http://localhost:3000
- Функции: Статистика сервисов, health checks
- Формат: JSON responses

Логирование:
- Библиотека: Кастомный Logger класс
- Уровни: Info, Warning, Error
- Формат: Структурированные сообщения с эмодзи

Безопасность

Права доступа:
- Публичные команды: /start, /help
- Администраторские: /ban, /unban, /mute, /unmute (без username только в публичных чатах)
- Приватные: /addAltronKey (только в приватном чате с ботом)

Валидация:
- Проверка прав администратора
- Валидация API ключей
- Ограничение по времени и частоте запросов

Разработка и поддержка

Команды разработки:
- npm run dev - Разработка с hot reload
- npm run build - Сборка TypeScript
- npm run test - Запуск тестов
- npm run lint - Проверка кода

Миграции БД:
- npm run generate - Генерация миграций
- npm run migrate - Применение миграций
- npm run studio - Drizzle Studio

Тестирование:
- Unit tests: Изолированное тестирование сервисов
- Integration tests: Тестирование взаимодействий
- Coverage: Jest с отчетами покрытия

Масштабирование

Горизонтальное масштабирование:
- Stateless архитектура
- Кеширование в Redis
- Очереди для ИИ-запросов

Вертикальное масштабирование:
- Оптимизация запросов к БД
- Адаптивное throttling
- Cleanup старых данных

Основные принципы работы

1. Регистрация группы → активация функций бота
2. Новый участник → капча → проверка пройдена/провалена
3. Сообщение от пользователя → антиспам (первые 5) → нормальная обработка
4. Упоминание бота → очередь ИИ → генерация ответа → отправка
5. Команда администратора → проверка прав → выполнение действия

Эта инструкция служит руководством для понимания архитектуры и бизнес-логики проекта. 