#!/usr/bin/env node

import { readFileSync } from "node:fs"
import { spawn } from "node:child_process"

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π .env —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
const nodeEnv = process.env.NODE_ENV || "development"
const envFile = nodeEnv === "production" ? ".env.production" : ".env"

console.log(`üîß Running migrations in ${nodeEnv} mode`)
console.log(`üìÅ Loading environment from: ${envFile}`)

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
try {
  const envContent = readFileSync(envFile, "utf8")
  const envVars = envContent.split("\n").reduce((acc, line) => {
    const cleanLine = line.trim()
    if (cleanLine && !cleanLine.startsWith("#")) {
      const equalIndex = cleanLine.indexOf("=")
      if (equalIndex > 0) {
        const key = cleanLine.substring(0, equalIndex).trim()
        const value = cleanLine.substring(equalIndex + 1).trim()
        // –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        const cleanValue = value.replace(/^['"]|['"]$/g, "")
        acc[key] = cleanValue
      }
    }
    return acc
  }, {})

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  Object.assign(process.env, envVars)

  console.log(`‚úÖ Loaded ${Object.keys(envVars).length} environment variables`)
} catch (error) {
  console.error(`‚ùå Error loading ${envFile}:`, error.message)
  process.exit(1)
}

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
const command = process.argv[2] || "migrate"
const validCommands = ["migrate", "generate", "push", "studio", "drop"]

if (!validCommands.includes(command)) {
  console.error(`‚ùå Invalid command: ${command}`)
  console.error(`Valid commands: ${validCommands.join(", ")}`)
  process.exit(1)
}

console.log(`üöÄ Running drizzle-kit ${command}...`)

// –ó–∞–ø—É—Å–∫–∞–µ–º drizzle-kit —Å –Ω—É–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
const drizzleProcess = spawn("npx", ["drizzle-kit", command], {
  stdio: "inherit",
  env: process.env,
})

drizzleProcess.on("close", (code) => {
  if (code === 0) {
    console.log(`‚úÖ drizzle-kit ${command} completed successfully`)
  } else {
    console.error(`‚ùå drizzle-kit ${command} failed with code ${code}`)
    process.exit(code)
  }
}) 