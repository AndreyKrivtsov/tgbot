import type { Logger } from "../helpers/Logger.js"

export type ServiceFactory<T = any> = () => T | Promise<T>
export type ServiceInstance<T = any> = T

export interface IService {
  initialize?(): Promise<void>
  start?(): Promise<void>
  stop?(): Promise<void>
  dispose?(): Promise<void>
}

/**
 * –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export class Container {
  private services = new Map<string, ServiceInstance>()
  private factories = new Map<string, ServiceFactory>()
  private initialized = new Set<string>()
  private started = new Set<string>()
  private logger: Logger

  constructor(logger: Logger) {
    this.logger = logger
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ —Ñ–∞–±—Ä–∏–∫–∏
   */
  register<T>(name: string, serviceOrFactory: T | ServiceFactory<T>): void {
    if (typeof serviceOrFactory === "function") {
      this.factories.set(name, serviceOrFactory as ServiceFactory<T>)
      this.logger.d(`üìù Registered factory: ${name}`)
    }
    else {
      this.services.set(name, serviceOrFactory)
      this.logger.d(`üìù Registered service: ${name}`)
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –∏–º–µ–Ω–∏
   */
  get<T>(name: string): T {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    if (this.services.has(name)) {
      return this.services.get(name) as T
    }

    // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∏–∑ —Ñ–∞–±—Ä–∏–∫–∏
    if (this.factories.has(name)) {
      const factory = this.factories.get(name)!
      const instance = factory()

      // –ï—Å–ª–∏ —Ñ–∞–±—Ä–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (instance instanceof Promise) {
        throw new Error(`Service "${name}" factory returns Promise. Use getAsync() instead.`)
      }

      this.services.set(name, instance)
      this.factories.delete(name) // –£–¥–∞–ª—è–µ–º —Ñ–∞–±—Ä–∏–∫—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
      return instance as T
    }

    throw new Error(`Service "${name}" not found`)
  }

  /**
   * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
   */
  async getAsync<T>(name: string): Promise<T> {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    if (this.services.has(name)) {
      return this.services.get(name) as T
    }

    // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∏–∑ —Ñ–∞–±—Ä–∏–∫–∏
    if (this.factories.has(name)) {
      const factory = this.factories.get(name)!
      const instance = await factory()

      this.services.set(name, instance)
      this.factories.delete(name) // –£–¥–∞–ª—è–µ–º —Ñ–∞–±—Ä–∏–∫—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
      return instance as T
    }

    throw new Error(`Service "${name}" not found`)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  has(name: string): boolean {
    return this.services.has(name) || this.factories.has(name)
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async initialize(): Promise<void> {
    this.logger.i("üîß Initializing services...")

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∏–∑ –≤—Å–µ—Ö —Ñ–∞–±—Ä–∏–∫
    const factoryNames = Array.from(this.factories.keys())
    for (const name of factoryNames) {
      await this.getAsync(name)
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    for (const [name, service] of this.services) {
      if (this.isService(service) && service.initialize && !this.initialized.has(name)) {
        try {
          await service.initialize()
          this.initialized.add(name)
          this.logger.d(`‚úÖ Initialized: ${name}`)
        }
        catch (error) {
          this.logger.e(`‚ùå Failed to initialize ${name}:`, error)
          throw error
        }
      }
    }

    this.logger.i("‚úÖ All services initialized")
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async start(): Promise<void> {
    this.logger.i("üöÄ Starting services...")

    for (const [name, service] of this.services) {
      if (this.isService(service) && service.start && !this.started.has(name)) {
        try {
          await service.start()
          this.started.add(name)
          this.logger.d(`‚úÖ Started: ${name}`)
        }
        catch (error) {
          this.logger.e(`‚ùå Failed to start ${name}:`, error)
          throw error
        }
      }
    }

    this.logger.i("‚úÖ All services started")
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async stop(): Promise<void> {
    this.logger.i("üõë Stopping services...")

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const startedServices = Array.from(this.started).reverse()

    for (const name of startedServices) {
      const service = this.services.get(name)
      if (service && this.isService(service) && service.stop) {
        try {
          await service.stop()
          this.started.delete(name)
          this.logger.d(`‚úÖ Stopped: ${name}`)
        }
        catch (error) {
          this.logger.e(`‚ùå Failed to stop ${name}:`, error)
        }
      }
    }

    this.logger.i("‚úÖ All services stopped")
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async dispose(): Promise<void> {
    this.logger.i("üóëÔ∏è Disposing services...")

    for (const [name, service] of this.services) {
      if (this.isService(service) && service.dispose) {
        try {
          await service.dispose()
          this.logger.d(`‚úÖ Disposed: ${name}`)
        }
        catch (error) {
          this.logger.e(`‚ùå Failed to dispose ${name}:`, error)
        }
      }
    }

    this.services.clear()
    this.factories.clear()
    this.initialized.clear()
    this.started.clear()

    this.logger.i("‚úÖ All services disposed")
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  getServiceNames(): string[] {
    return [
      ...Array.from(this.services.keys()),
      ...Array.from(this.factories.keys()),
    ]
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç —Å–µ—Ä–≤–∏—Å–æ–º
   */
  private isService(obj: any): obj is IService {
    return obj != null && typeof obj === "object"
  }
} 