import type { Container } from "./Container.js"
import type { Logger } from "../helpers/Logger.js"
import type { AppConfig } from "../config.js"

/**
 * –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export class Application {
  private container: Container
  private logger: Logger
  private config: AppConfig

  constructor(container: Container, logger: Logger, config: AppConfig) {
    this.container = container
    this.logger = logger
    this.config = config
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  async initialize(): Promise<void> {
    this.logger.i("üèóÔ∏è Setting up application services...")

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    await this.registerCoreServices()

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    await this.registerInfrastructureServices()

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-—Å–µ—Ä–≤–∏—Å—ã
    await this.registerBusinessServices()

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–µ–±-—Å–µ—Ä–≤–∏—Å—ã
    await this.registerWebServices()

    this.logger.i("‚úÖ Application services registered")
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  async start(): Promise<void> {
    this.logger.i("üöÄ Starting application services...")

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    await this.container.start()

    this.logger.i("‚úÖ Application services started")
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  async stop(): Promise<void> {
    this.logger.i("üõë Stopping application services...")

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    await this.container.stop()

    this.logger.i("‚úÖ Application services stopped")
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è core —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async registerCoreServices(): Promise<void> {
    this.logger.i("üì¶ Registering core services...")

    // Database Service
    this.container.register("database", async () => {
      const { DatabaseService } = await import("../services/DatabaseService/index.js")
      return new DatabaseService(this.config, this.logger)
    })

    // Cache Service
    this.container.register("cache", async () => {
      const { CacheService } = await import("../services/CacheService/index.js")
      return new CacheService(this.config, this.logger)
    })

    this.logger.i("‚úÖ Core services registered")
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è infrastructure —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async registerInfrastructureServices(): Promise<void> {
    this.logger.i("üîß Registering infrastructure services...")

    // Redis Service
    this.container.register("redis", async () => {
      const { RedisService } = await import("../services/RedisService/index.js")
      return new RedisService(this.config, this.logger)
    })

    // AI Service
    this.container.register("aiService", async () => {
      const { AIService } = await import("../services/AI/index.js")
      return new AIService(this.config, this.logger)
    })

    this.logger.i("‚úÖ Infrastructure services registered")
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è business —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async registerBusinessServices(): Promise<void> {
    this.logger.i("üè¢ Registering business services...")

    // Chat Repository
    this.container.register("chatRepository", async () => {
      const { ChatAiRepository } = await import("../repository/ChatAiRepository.js")
      const database = await this.container.getAsync("database") as any
      const cache = await this.container.getAsync("cache") as any
      return new ChatAiRepository(database, cache)
    })

    // Chat Config Service
    this.container.register("chatConfig", async () => {
      const { ChatConfigService } = await import("../services/ChatConfigService/index.js")
      const chatRepository = await this.container.getAsync("chatRepository") as any
      return new ChatConfigService(chatRepository)
    })

    // Captcha Service
    this.container.register("captcha", async () => {
      const { CaptchaService } = await import("../services/CaptchaService/index.js")

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –ë–î –ø–æ–∑–∂–µ)
      const captchaSettings = {
        timeoutMs: 60000, // 60 —Å–µ–∫—É–Ω–¥
        checkIntervalMs: 5000, // 5 —Å–µ–∫—É–Ω–¥
      }

      return new CaptchaService(this.config, this.logger, {}, captchaSettings)
    })

    // Anti-Spam Service
    this.container.register("antiSpam", async () => {
      const { AntiSpamService } = await import("../services/AntiSpamService/index.js")

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –ë–î –ø–æ–∑–∂–µ)
      const antiSpamSettings = {
        timeoutMs: 5000, // 5 —Å–µ–∫—É–Ω–¥
        maxRetries: 2, // 2 –ø–æ–ø—ã—Ç–∫–∏
        retryDelayMs: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞
      }

      this.logger.i("üõ°Ô∏è [ANTISPAM DEBUG] Registering AntiSpamService with settings:", JSON.stringify(antiSpamSettings, null, 2))
      this.logger.i("üõ°Ô∏è [ANTISPAM DEBUG] ANTISPAM_URL from config:", this.config.ANTISPAM_URL)

      return new AntiSpamService(this.config, this.logger, {}, antiSpamSettings)
    })

    // Chat Service
    this.container.register("chat", async () => {
      const { AIChatService } = await import("../services/AIChatService/index.js")
      const aiService = await this.container.getAsync("aiService")
      const database = await this.container.getAsync("database") as any

      return new AIChatService(this.config, this.logger, {
        aiService,
        database,
      })
    })

    this.logger.i("‚úÖ Business services registered")
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è web —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async registerWebServices(): Promise<void> {
    this.logger.i("üåê Registering web services...")

    // Telegram Bot Service (—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏)
    this.container.register("telegramBot", async () => {
      const { TelegramBotService } = await import("../services/TelegramBot/index.js")
      const redisService = await this.container.getAsync("redis")
      const captchaService = await this.container.getAsync("captcha")
      const antiSpamService = await this.container.getAsync("antiSpam")
      const chatService = await this.container.getAsync("chat")
      const chatRepository = await this.container.getAsync("chatRepository")

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –ë–î –ø–æ–∑–∂–µ)
      const botSettings = {
        captchaTimeoutMs: 60000, // 60 —Å–µ–∫—É–Ω–¥
        captchaCheckIntervalMs: 5000, // 5 —Å–µ–∫—É–Ω–¥
        errorMessageDeleteTimeoutMs: 60000, // 60 —Å–µ–∫—É–Ω–¥
        deleteSystemMessages: true, // –£–¥–∞–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        temporaryBanDurationSec: 40, // 40 —Å–µ–∫—É–Ω–¥
        autoUnbanDelayMs: 5000, // 5 —Å–µ–∫—É–Ω–¥
        maxMessagesForSpamCheck: 5, // –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
      }

      return new TelegramBotService(this.config, this.logger, {
        redisService: redisService as any,
        captchaService: captchaService as any,
        antiSpamService: antiSpamService as any,
        chatService: chatService as any,
        chatRepository: chatRepository as any,
      }, botSettings)
    })

    // API Server Service
    this.container.register("apiServer", async () => {
      const { ApiServerService } = await import("../services/ApiServerService/index.js")
      const database = await this.container.getAsync("database")
      const telegramBot = await this.container.getAsync("telegramBot")

      return new ApiServerService(this.config, this.logger, {
        database,
        telegramBot,
      })
    })

    this.logger.i("‚úÖ Web services registered")
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
   */
  getContainer(): Container {
    return this.container
  }
}
