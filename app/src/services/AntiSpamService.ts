import type { IService } from "../core/Container.js"
import type { Logger } from "../helpers/Logger.js"
import type { AppConfig } from "../config.js"

interface AntiSpamDependencies {
  aiService?: any
}

interface UserSpamCheck {
  userId: number
  messageCount: number
  isChecking: boolean
  lastCheckTime: number
}

/**
 * –°–µ—Ä–≤–∏—Å –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export class AntiSpamService implements IService {
  private config: AppConfig
  private logger: Logger
  private dependencies: AntiSpamDependencies
  private userChecks: Map<number, UserSpamCheck> = new Map()
  private maxMessagesToCheck = 5

  constructor(config: AppConfig, logger: Logger, dependencies: AntiSpamDependencies = {}) {
    this.config = config
    this.logger = logger
    this.dependencies = dependencies
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
   */
  async initialize(): Promise<void> {
    this.logger.i("üõ°Ô∏è Initializing anti-spam service...")
    this.logger.i("‚úÖ Anti-spam service initialized")
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
   */
  async start(): Promise<void> {
    this.logger.i("üöÄ Starting anti-spam service...")
    this.logger.i("‚úÖ Anti-spam service started")
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
   */
  async stop(): Promise<void> {
    this.logger.i("üõë Stopping anti-spam service...")
    this.userChecks.clear()
    this.logger.i("‚úÖ Anti-spam service stopped")
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async dispose(): Promise<void> {
    this.logger.i("üóëÔ∏è Disposing anti-spam service...")
    await this.stop()
    this.logger.i("‚úÖ Anti-spam service disposed")
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  isHealthy(): boolean {
    return true
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ø–∞–º
   */
  async checkMessage(userId: number, message: string): Promise<{
    isSpam: boolean
    shouldCheck: boolean
    reason?: string
  }> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      let userCheck = this.userChecks.get(userId)
      if (!userCheck) {
        userCheck = {
          userId,
          messageCount: 0,
          isChecking: false,
          lastCheckTime: Date.now()
        }
        this.userChecks.set(userId, userCheck)
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
      userCheck.messageCount++
      userCheck.lastCheckTime = Date.now()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (userCheck.messageCount > this.maxMessagesToCheck) {
        return { isSpam: false, shouldCheck: false, reason: "User passed initial checks" }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      const basicCheck = this.performBasicChecks(message)
      if (basicCheck.isSpam) {
        this.logger.w(`Basic spam detected from user ${userId}: ${basicCheck.reason}`)
        return basicCheck
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (this.dependencies.aiService && !userCheck.isChecking) {
        userCheck.isChecking = true
        
        try {
          const aiResult = await this.checkWithAI(message)
          userCheck.isChecking = false
          
          if (aiResult.isSpam) {
            this.logger.w(`AI spam detected from user ${userId}: ${aiResult.reason}`)
          } else {
            this.logger.d(`Message from user ${userId} passed AI check`)
          }
          
          return aiResult
        } catch (error) {
          userCheck.isChecking = false
          this.logger.e("AI spam check failed:", error)
          return { isSpam: false, shouldCheck: true, reason: "AI check failed" }
        }
      }

      return { isSpam: false, shouldCheck: true }
    } catch (error) {
      this.logger.e("Error in spam check:", error)
      return { isSpam: false, shouldCheck: false, reason: "Check error" }
    }
  }

  /**
   * –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ø–∞–º
   */
  private performBasicChecks(message: string): {
    isSpam: boolean
    shouldCheck: boolean
    reason?: string
  } {
    // –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (message.length > 1000) {
      return { isSpam: true, shouldCheck: true, reason: "Message too long" }
    }

    // –ú–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
    if (this.hasRepeatingPatterns(message)) {
      return { isSpam: true, shouldCheck: true, reason: "Repeating patterns detected" }
    }

    // –ú–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫
    const urlCount = (message.match(/https?:\/\/[^\s]+/g) || []).length
    if (urlCount > 2) {
      return { isSpam: true, shouldCheck: true, reason: "Too many URLs" }
    }

    // –°–ø–∞–º-—Å–ª–æ–≤–∞
    const spamKeywords = [
      '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–¥–µ–Ω—å–≥–∏ –±—ã—Å—Ç—Ä–æ', '–±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π', '–ø–∏—Ä–∞–º–∏–¥–∞',
      '–∫—É–ø–∏—Ç—å –¥–µ—à–µ–≤–æ', '–∞–∫—Ü–∏—è', '—Å–∫–∏–¥–∫–∞', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '–≤—ã–∏–≥—Ä–∞–π'
    ]
    
    const lowerMessage = message.toLowerCase()
    for (const keyword of spamKeywords) {
      if (lowerMessage.includes(keyword)) {
        return { isSpam: true, shouldCheck: true, reason: `Spam keyword: ${keyword}` }
      }
    }

    return { isSpam: false, shouldCheck: true }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
   */
  private hasRepeatingPatterns(message: string): boolean {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (–±–æ–ª—å—à–µ 5 –ø–æ–¥—Ä—è–¥)
    if (/(.)\1{5,}/.test(message)) {
      return true
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
    const words = message.split(/\s+/)
    for (let i = 0; i < words.length - 2; i++) {
      const word = words[i]
      if (word && word.length > 2) {
        let consecutiveCount = 1
        for (let j = i + 1; j < words.length; j++) {
          if (words[j] === word) {
            consecutiveCount++
            if (consecutiveCount >= 3) {
              return true
            }
          } else {
            break
          }
        }
      }
    }

    return false
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ AI
   */
  private async checkWithAI(message: string): Promise<{
    isSpam: boolean
    shouldCheck: boolean
    reason?: string
  }> {
    if (!this.dependencies.aiService) {
      return { isSpam: false, shouldCheck: true, reason: "AI service not available" }
    }

    try {
      const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ —Å–ø–∞–º–æ–º. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ "–°–ü–ê–ú" –∏–ª–∏ "–ù–ï –°–ü–ê–ú":

–°–æ–æ–±—â–µ–Ω–∏–µ: "${message}"

–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–ø–∞–º–∞:
- –†–µ–∫–ª–∞–º–∞ —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥
- –ü—Ä–∏–∑—ã–≤—ã –∫ –ø–µ—Ä–µ—Ö–æ–¥–∞–º –ø–æ —Å—Å—ã–ª–∫–∞–º
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞
- –ù–∞–≤—è–∑—á–∏–≤–∞—è —Ä–µ–∫–ª–∞–º–∞
- –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
- –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç

–û—Ç–≤–µ—Ç:`

      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ AI —Å–µ—Ä–≤–∏—Å–∞
      const aiResponse = await this.dependencies.aiService.checkSpam?.(prompt)
      
      if (!aiResponse) {
        return { isSpam: false, shouldCheck: true, reason: "No AI response" }
      }

      const isSpam = aiResponse.toLowerCase().includes('—Å–ø–∞–º')
      
      return {
        isSpam,
        shouldCheck: true,
        reason: isSpam ? "AI detected spam" : "AI approved message"
      }
    } catch (error) {
      this.logger.e("AI spam check error:", error)
      return { isSpam: false, shouldCheck: true, reason: "AI check failed" }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getUserStats(userId: number): UserSpamCheck | null {
    return this.userChecks.get(userId) || null
  }

  /**
   * –°–±—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  resetUserChecks(userId: number): void {
    this.userChecks.delete(userId)
    this.logger.d(`Reset spam checks for user ${userId}`)
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  setMaxMessagesToCheck(count: number): void {
    this.maxMessagesToCheck = Math.max(1, Math.min(count, 20))
    this.logger.i(`Set max messages to check: ${this.maxMessagesToCheck}`)
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
   */
  cleanupOldRecords(): void {
    const now = Date.now()
    const maxAge = 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞

    for (const [userId, userCheck] of this.userChecks.entries()) {
      if (now - userCheck.lastCheckTime > maxAge) {
        this.userChecks.delete(userId)
      }
    }

    this.logger.d("Cleaned up old spam check records")
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
   */
  getStats(): object {
    return {
      trackedUsers: this.userChecks.size,
      maxMessagesToCheck: this.maxMessagesToCheck,
      serviceStatus: "active"
    }
  }
} 