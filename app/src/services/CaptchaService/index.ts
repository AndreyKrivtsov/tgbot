import type { IService } from "../../core/Container.js"
import type { Logger } from "../../helpers/Logger.js"
import type { AppConfig } from "../../config.js"

interface CaptchaDependencies {
  telegramBot?: any
}

interface CaptchaSettings {
  timeoutMs: number // –¢–∞–π–º–∞—É—Ç –∫–∞–ø—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫)
  checkIntervalMs: number // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞–ø—á (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫)
}

interface CaptchaChallenge {
  question: number[]
  answer: number
  options: number[]
}

interface RestrictedUser {
  userId: number
  chatId: number
  questionId: number
  answer: number
  username?: string
  firstName: string
  timestamp: number
  isAnswered: boolean
}

/**
 * –°–µ—Ä–≤–∏—Å –∫–∞–ø—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export class CaptchaService implements IService {
  private config: AppConfig
  private logger: Logger
  private dependencies: CaptchaDependencies
  private settings: CaptchaSettings
  private restrictedUsers: Map<number, RestrictedUser> = new Map()
  private isMonitoring = false

  constructor(
    config: AppConfig,
    logger: Logger,
    dependencies: CaptchaDependencies = {},
    settings?: Partial<CaptchaSettings>,
  ) {
    this.config = config
    this.logger = logger
    this.dependencies = dependencies

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.settings = {
      timeoutMs: 60000, // 60 —Å–µ–∫—É–Ω–¥
      checkIntervalMs: 5000, // 5 —Å–µ–∫—É–Ω–¥
      ...settings,
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ø—á–∏
   */
  async initialize(): Promise<void> {
    this.logger.i("üîê Initializing captcha service...")
    this.logger.i("‚úÖ Captcha service initialized")
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ø—á–∏
   */
  async start(): Promise<void> {
    this.logger.i("üöÄ Starting captcha service...")

    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∞–π–º–∞—É—Ç–æ–≤
    this.startTimeoutMonitoring()

    this.logger.i("‚úÖ Captcha service started")
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ø—á–∏
   */
  async stop(): Promise<void> {
    this.logger.i("üõë Stopping captcha service...")
    this.isMonitoring = false
    this.restrictedUsers.clear()
    this.logger.i("‚úÖ Captcha service stopped")
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async dispose(): Promise<void> {
    this.logger.i("üóëÔ∏è Disposing captcha service...")
    await this.stop()
    this.logger.i("‚úÖ Captcha service disposed")
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  isHealthy(): boolean {
    return true
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ø—á–∏
   */
  generateCaptcha(): CaptchaChallenge {
    const randomOption = (from: number, to: number) => {
      return Math.floor(Math.random() * (to - from + 1)) + from
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É —Å–ª–æ–∂–µ–Ω–∏—è
    const num1 = randomOption(1, 10)
    const num2 = randomOption(1, 10)
    const question: number[] = [num1, num2]
    const answer = num1 + num2

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    const options: number[] = []
    while (options.length < 3) {
      const option = randomOption(1, 20)
      if (!options.includes(option) && option !== answer) {
        options.push(option)
      }
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    const insertIndex = randomOption(0, 3)
    options.splice(insertIndex, 0, answer)

    return { question, answer, options }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö
   */
  addRestrictedUser(
    userId: number,
    chatId: number,
    questionId: number,
    answer: number,
    username?: string,
    firstName: string = "Unknown",
  ): void {
    const restrictedUser: RestrictedUser = {
      userId,
      chatId,
      questionId,
      answer,
      username,
      firstName,
      timestamp: Date.now(),
      isAnswered: false,
    }

    this.restrictedUsers.set(userId, restrictedUser)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–ø—á—É
   */
  validateAnswer(userId: number, questionId: number, userAnswer: number): {
    isValid: boolean
    user?: RestrictedUser
  } {
    const restrictedUser = this.restrictedUsers.get(userId)

    if (!restrictedUser) {
      return { isValid: false }
    }

    if (restrictedUser.isAnswered) {
      return { isValid: false, user: restrictedUser }
    }

    if (restrictedUser.questionId !== questionId) {
      return { isValid: false, user: restrictedUser }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    const isCorrect = restrictedUser.answer === userAnswer

    // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π
    restrictedUser.isAnswered = true

    if (isCorrect) {
      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ —É—Å–ø–µ—Ö–∞
      if (this.onCaptchaSuccess) {
        this.onCaptchaSuccess(restrictedUser)
      }

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö
      this.restrictedUsers.delete(userId)

      return { isValid: true, user: restrictedUser }
    } else {
      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –Ω–µ—É–¥–∞—á–∏
      if (this.onCaptchaFailed) {
        this.onCaptchaFailed(restrictedUser)
      }

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö
      this.restrictedUsers.delete(userId)

      return { isValid: false, user: restrictedUser }
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö
   */
  removeRestrictedUser(userId: number): RestrictedUser | undefined {
    this.logger.i(`üîì Removing user ${userId} from restricted list`)

    const user = this.restrictedUsers.get(userId)
    if (user) {
      this.restrictedUsers.delete(userId)
      this.logger.i(`‚úÖ User ${userId} (${user.firstName}) removed from restrictions`)
      this.logger.d(`Remaining restricted users: ${this.restrictedUsers.size}`)
    } else {
      this.logger.w(`‚ö†Ô∏è User ${userId} was not in restricted list`)
    }

    return user
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  isUserRestricted(userId: number): boolean {
    return this.restrictedUsers.has(userId)
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  getRestrictedUser(userId: number): RestrictedUser | undefined {
    return this.restrictedUsers.get(userId)
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  getAllRestrictedUsers(): RestrictedUser[] {
    return Array.from(this.restrictedUsers.values())
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
   */
  private startTimeoutMonitoring(): void {
    this.isMonitoring = true

    const checkTimeouts = () => {
      if (!this.isMonitoring)
        return

      const now = Date.now()
      const expiredUsers: RestrictedUser[] = []

      for (const [userId, user] of this.restrictedUsers) {
        if (!user.isAnswered && (now - user.timestamp) > this.settings.timeoutMs) {
          this.logger.w(`‚è∞ Captcha timeout for user ${userId} (${user.firstName})`)
          expiredUsers.push(user)
        }
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      for (const user of expiredUsers) {
        this.handleCaptchaTimeout(user)
        this.restrictedUsers.delete(user.userId)
      }

      if (this.isMonitoring) {
        setTimeout(checkTimeouts, this.settings.checkIntervalMs)
      }
    }

    checkTimeouts()
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∫–∞–ø—á–∏
   */
  private handleCaptchaTimeout(user: RestrictedUser): void {
    this.logger.i(`‚è∞ Handling captcha timeout for user ${user.userId} (${user.firstName})`)

    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ —Ç–∞–π–º–∞—É—Ç–∞
    if (this.onCaptchaTimeout) {
      this.onCaptchaTimeout(user)
    }
  }

  // –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞–ø—á–∏
  public onCaptchaTimeout?: (user: RestrictedUser) => void

  /**
   * –ö–æ–ª–±—ç–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏
   */
  public onCaptchaSuccess?: (user: RestrictedUser) => void

  /**
   * –ö–æ–ª–±—ç–∫ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏
   */
  public onCaptchaFailed?: (user: RestrictedUser) => void

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  getSettings(): CaptchaSettings {
    return { ...this.settings }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  updateSettings(newSettings: Partial<CaptchaSettings>): void {
    this.settings = { ...this.settings, ...newSettings }
    this.logger.i("‚öôÔ∏è Captcha settings updated:", newSettings)
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStats(): object {
    return {
      restrictedUsersCount: this.restrictedUsers.size,
      isMonitoring: this.isMonitoring,
    }
  }
}
