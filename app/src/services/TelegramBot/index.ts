import type { IService } from "../../core/Container.js"
import type { Logger } from "../../helpers/Logger.js"
import type { AppConfig } from "../../config.js"
import type { CaptchaService } from "../CaptchaService/index.js"
import type { AntiSpamService } from "../AntiSpamService/index.js"
import type { AIChatService } from "../AIChatService/index.js"
import type { Bot, MessageContext, NewChatMembersContext } from "gramio"

interface TelegramBotDependencies {
  repository?: any
  captchaService?: CaptchaService
  antiSpamService?: AntiSpamService
  aiChatService?: AIChatService
}

interface TelegramBotSettings {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏
  captchaTimeoutMs: number // –¢–∞–π–º–∞—É—Ç –∫–∞–ø—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫)
  captchaCheckIntervalMs: number // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞–ø—á (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫)

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  errorMessageDeleteTimeoutMs: number // –¢–∞–π–º–∞—É—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫)
  deleteSystemMessages: boolean // –£–¥–∞–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ/–≤—ã—Ö–æ–¥–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–Ω–æ–≤
  temporaryBanDurationSec: number // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 40 —Å–µ–∫)
  autoUnbanDelayMs: number // –ó–∞–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–∞–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫)

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
  maxMessagesForSpamCheck: number // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
}

interface UserMessageCounter {
  userId: number
  messageCount: number
  spamCount: number // –°—á–µ—Ç—á–∏–∫ —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
  username?: string
  firstName: string
  lastActivity: number
}

/**
 * –°–µ—Ä–≤–∏—Å Telegram –±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */
export class TelegramBotService implements IService {
  private config: AppConfig
  private logger: Logger
  private dependencies: TelegramBotDependencies
  private settings: TelegramBotSettings
  private userMessageCounters: Map<number, UserMessageCounter> = new Map()
  private bot: Bot | null = null
  private isRunning = false
  private hasGramIO = false

  constructor(
    config: AppConfig,
    logger: Logger,
    dependencies: TelegramBotDependencies = {},
    settings?: Partial<TelegramBotSettings>,
  ) {
    this.config = config
    this.logger = logger
    this.dependencies = dependencies

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.settings = {
      captchaTimeoutMs: 60000, // 60 —Å–µ–∫—É–Ω–¥
      captchaCheckIntervalMs: 5000, // 5 —Å–µ–∫—É–Ω–¥
      errorMessageDeleteTimeoutMs: 60000, // 60 —Å–µ–∫—É–Ω–¥
      deleteSystemMessages: true, // –£–¥–∞–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      temporaryBanDurationSec: 40, // 40 —Å–µ–∫—É–Ω–¥
      autoUnbanDelayMs: 5000, // 5 —Å–µ–∫—É–Ω–¥
      maxMessagesForSpamCheck: 5, // 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º
      ...settings,
    }
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è HTML
   */
  private escapeHTML(text: string): string {
    return text
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2
   */
  private escapeMarkdownV2(text: string): string {
    // –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2:
    // _ * [ ] ( ) ~ ` > # + - = | { } . !
    return text.replace(/[_*[\]()~`>#+=|{}.!\\-]/g, "\\$&")
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
   */
  async initialize(): Promise<void> {
    this.logger.i("ü§ñ Initializing Telegram bot service...")

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GramIO
      try {
        const { Bot } = await import("gramio")
        this.hasGramIO = true

        // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        this.bot = new Bot(this.config.BOT_TOKEN)

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers()

        this.logger.i("‚úÖ Telegram bot initialized")
      } catch (_error) {
        this.logger.w("‚ö†Ô∏è GramIO not available. Bot service disabled.")
        this.logger.w("üìã To enable bot:")
        this.logger.w("   1. Run: npm install gramio")
        this.logger.w("   2. Set BOT_TOKEN in .env")
        this.logger.w("   3. Restart the application")
      }
    } catch (error) {
      this.logger.e("‚ùå Failed to initialize Telegram bot:", error)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
   */
  async start(): Promise<void> {
    this.logger.i("üöÄ Starting TelegramBot service...")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    this.logger.i("üîç [ANTISPAM DEBUG] Checking dependencies:")
    this.logger.i(`  Repository: ${!!this.dependencies.repository}`)
    this.logger.i(`  CaptchaService: ${!!this.dependencies.captchaService}`)
    this.logger.i(`  AntiSpamService: ${!!this.dependencies.antiSpamService}`)
    this.logger.i(`  AIChatService: ${!!this.dependencies.aiChatService}`)

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± AntiSpamService
    if (this.dependencies.antiSpamService) {
      this.logger.i("üõ°Ô∏è [ANTISPAM DEBUG] AntiSpamService details:")
      this.logger.i(`   - Service type: ${this.dependencies.antiSpamService.constructor.name}`)
      this.logger.i(`   - Has checkMessage method: ${typeof this.dependencies.antiSpamService.checkMessage === "function"}`)
      this.logger.i(`   - Is healthy: ${typeof this.dependencies.antiSpamService.isHealthy === "function" ? this.dependencies.antiSpamService.isHealthy() : "unknown"}`)
    } else {
      this.logger.w("‚ö†Ô∏è [ANTISPAM DEBUG] AntiSpamService is NOT available")
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    this.logger.i("üîß [ANTISPAM DEBUG] Bot settings:")
    this.logger.i(`   - maxMessagesForSpamCheck: ${this.settings.maxMessagesForSpamCheck}`)
    this.logger.i(`   - Other settings:`, JSON.stringify(this.settings, null, 2))

    if (!this.dependencies.captchaService) {
      this.logger.w("‚ö†Ô∏è CaptchaService is not available - captcha functionality will be disabled")
    }

    if (!this.hasGramIO || !this.bot) {
      this.logger.w("üö´ Telegram bot not available (GramIO not installed or BOT_TOKEN not set)")
      return
    }

    this.setupServiceCallbacks()

    if (this.isRunning) {
      this.logger.w("TelegramBot service is already running")
      return
    }

    try {
      await this.bot.start()
      this.isRunning = true

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await this.bot.api.getMe()

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ —Å–ø–∞–º-–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
      this.startSpamCleanupTimer()

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º AntiSpamService –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
      if (this.dependencies.antiSpamService && typeof (this.dependencies.antiSpamService as any).testAntiSpam === "function") {
        this.logger.i("üß™ [ANTISPAM DEBUG] Running AntiSpam test...")
        try {
          await (this.dependencies.antiSpamService as any).testAntiSpam()
        } catch (error) {
          this.logger.e("üß™ [ANTISPAM DEBUG] AntiSpam test failed:", error)
        }
      }

      this.logger.i(`‚úÖ TelegramBot service started: @${botInfo.username}`)
    } catch (error) {
      this.logger.e("‚ùå Failed to start TelegramBot service:", error)
      throw error
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   */
  async stop(): Promise<void> {
    if (this.isRunning && this.bot) {
      this.logger.i("üõë Stopping Telegram bot...")

      try {
        await this.bot.stop()
        this.isRunning = false
        this.logger.i("‚úÖ Telegram bot stopped")
      } catch (error) {
        this.logger.e("Error stopping bot:", error)
      }
    }
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async dispose(): Promise<void> {
    this.logger.i("üóëÔ∏è Disposing Telegram bot service...")
    await this.stop()
    this.bot = null
    this.logger.i("‚úÖ Telegram bot service disposed")
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
   */
  isHealthy(): boolean {
    return this.isRunning && this.bot !== null
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventHandlers(): void {
    if (!this.bot)
      return

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    this.bot.command("start", (context: any) => {
      this.handleStartCommand(context)
    })

    this.bot.command("help", (context: any) => {
      this.handleHelpCommand(context)
    })

    this.bot.command("stats", (context: any) => {
      this.handleStatsCommand(context)
    })

    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    this.bot.command("ban", (context: any) => {
      this.handleBanCommand(context)
    })

    this.bot.command("unban", (context: any) => {
      this.handleUnbanCommand(context)
    })

    this.bot.command("mute", (context: any) => {
      this.handleMuteCommand(context)
    })

    this.bot.command("unmute", (context: any) => {
      this.handleUnmuteCommand(context)
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    this.bot.on("chat_member", (context: any) => {
      this.logger.i("üî• CHAT_MEMBER event triggered!")
      this.handleChatMember(context)
    })

    this.bot.on("new_chat_members", (context: any) => {
      this.logger.i("üî• NEW_CHAT_MEMBERS event triggered!")
      this.handleNewChatMembers(context)
    })

    this.bot.on("left_chat_member", (context: any) => {
      this.logger.i("üî• LEFT_CHAT_MEMBER event triggered!")
      this.handleLeftChatMember(context)
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on("message", (context: MessageContext<Bot>) => {
      this.handleMessage(context)
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ (–∫–∞–ø—á–∞)
    this.bot.on("callback_query", (context: any) => {
      this.handleCallbackQuery(context)
    })
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  private setupServiceCallbacks(): void {
    // –ö–æ–ª–±—ç–∫–∏ –¥–ª—è CaptchaService
    if (this.dependencies.captchaService) {
      this.dependencies.captchaService.onCaptchaTimeout = (user) => {
        this.handleCaptchaTimeout(user)
      }

      this.dependencies.captchaService.onCaptchaSuccess = (user) => {
        this.handleCaptchaSuccess(user)
      }

      this.dependencies.captchaService.onCaptchaFailed = (user) => {
        this.handleCaptchaFailed(user)
      }
    }

    // –ö–æ–ª–±—ç–∫–∏ –¥–ª—è AIChatService
    if (this.dependencies.aiChatService) {
      this.dependencies.aiChatService.onMessageResponse = (contextId, response, messageId) => {
        this.handleAIResponse(contextId, response, messageId)
      }

      this.dependencies.aiChatService.onTypingStart = (contextId) => {
        this.sendTypingAction(contextId)
      }

      this.dependencies.aiChatService.onTypingStop = (contextId) => {
        // –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞
   */
  private async handleChatMember(context: any): Promise<void> {
    const _oldMember = context.oldChatMember
    const newMember = context.newChatMember
    const _chatId = context.chat.id
    const _user = newMember.user

    if (newMember.status === "member" && context.oldChatMember.status === "left") {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ
      await this.handleNewChatMembers({
        ...context,
        newChatMembers: [newMember.user],
      } as NewChatMembersContext<Bot>)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  private async handleNewChatMembers(context: NewChatMembersContext<Bot>): Promise<void> {
    try {
      this.logger.i("üéØ Processing new chat members...")

      const chatId = context.chat.id
      const newMembers = context.newChatMembers
      const messageId = (context as any).messageId || (context as any).message_id || context.id

      // –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
      if (this.settings.deleteSystemMessages && messageId) {
        await this.deleteMessage(chatId, messageId)
      }

      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      this.logger.i("=== NEW CHAT MEMBERS EVENT ===")
      this.logger.i(`Chat ID: ${chatId}`)
      this.logger.i(`Message ID: ${messageId}`)
      this.logger.i(`New members count: ${newMembers?.length || 0}`)
      this.logger.i(`CaptchaService available: ${!!this.dependencies.captchaService}`)

      if (newMembers?.length) {
        newMembers.forEach((user: any, index: number) => {
          this.logger.i(`Member ${index + 1}: ${user.firstName} (ID: ${user.id}, isBot: ${user.isBot()})`)
        })

        for (const user of newMembers) {
          if (!user.isBot()) {
            this.logger.i(`üîê Processing captcha for new member: ${user.firstName} (ID: ${user.id})`)
            await this.initiateUserCaptcha(chatId, user)
          } else {

          }
        }
      }

      this.logger.i("‚úÖ New chat members processing completed")
    } catch (error) {
      this.logger.e("‚ùå Error handling new chat members:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—à–µ–¥—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  private async handleLeftChatMember(context: any): Promise<void> {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∏–¥–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async initiateUserCaptcha(chatId: number, user: any): Promise<void> {
    this.logger.i(`üîê Starting captcha initiation for user ${user.id} (${user.firstName})`)

    if (!this.dependencies.captchaService) {
      this.logger.w("‚ùå Captcha service not available")
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –∫–∞–ø—á–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (this.dependencies.captchaService.isUserRestricted(user.id)) {
      this.logger.i(`‚ö†Ô∏è User ${user.id} already has active captcha, skipping duplicate`)
      return
    }

    try {
      this.logger.i("üé≤ Generating captcha challenge...")

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ø—á—É
      const captcha = this.dependencies.captchaService.generateCaptcha()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–∞–ø—á–∏
      if (!captcha.question || captcha.question.length < 2
        || typeof captcha.question[0] !== "number" || typeof captcha.question[1] !== "number") {
        this.logger.e("‚ùå Invalid captcha question generated")
        return
      }

      this.logger.i(`üßÆ Captcha generated: ${captcha.question[0]} + ${captcha.question[1]} = ${captcha.answer}`)
      this.logger.i(`üî¢ Options: [${captcha.options.join(", ")}]`)

      this.logger.i("üì§ Sending captcha message...")

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É
      const correctAnswer = captcha.question[0] + captcha.question[1]
      const sentMessage = await this.sendCaptchaMessage(
        chatId,
        user,
        captcha.question,
        captcha.options,
      )

      this.logger.i(`‚úÖ Captcha message sent with ID: ${sentMessage?.messageId || sentMessage?.message_id || "unknown"}`)

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ
      if (this.dependencies.captchaService && sentMessage) {
        this.dependencies.captchaService.addRestrictedUser(
          user.id,
          chatId,
          sentMessage?.messageId || sentMessage?.message_id || 0,
          captcha.answer,
          user.username,
        )
      }

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.logger.i("üö´ Restricting user permissions...")
      await this.restrictUser(chatId, user.id)

      this.logger.i(`üéâ Captcha initiated successfully for user ${user.id} (${user.firstName})`)
    } catch (error) {
      this.logger.e(`‚ùå Error initiating captcha for user ${user.id}:`, error)
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π
   */
  private async sendCaptchaMessage(
    chatId: number,
    user: any,
    question: number[],
    options: number[],
  ): Promise<any> {
    if (!this.bot)
      return null

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!question || question.length < 2
      || typeof question[0] !== "number" || typeof question[1] !== "number") {
      this.logger.e("‚ùå Invalid question data provided to sendCaptchaMessage")
      return null
    }

    // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    const correctAnswer = question[0] + question[1]

    try {
      const sentMessage = await this.bot.api.sendMessage({
        chat_id: chatId,
        text: `üîê –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç, —Ä–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:

${question[0]} + ${question[1]} = ?

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:`,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            options.map((option, index) => ({
              text: option.toString(),
              callback_data: `captcha_${user.id}_${index}_${option === correctAnswer ? "correct" : "wrong"}`,
            })),
          ],
        },
      })

      return sentMessage
    } catch (error) {
      this.logger.e("Error sending captcha message:", error)
      return null
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ (–æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–∞–ø—á—É)
   */
  private async handleCallbackQuery(context: any): Promise<void> {
    this.logger.i("üîò Processing callback query...")

    if (!this.dependencies.captchaService) {
      this.logger.w("‚ùå CaptchaService not available for callback")
      return
    }

    try {
      const userId = context.from.id
      const userAnswer = Number.parseInt(context.data)

      // –ü–æ–ª—É—á–∞–µ–º messageId –∏–∑ callback query
      let messageId: number | undefined
      if (context.message?.messageId) {
        messageId = context.message.messageId
      } else if (context.message?.message_id) {
        messageId = context.message.message_id
      } else if (context.message?.id) {
        messageId = context.message.id
      } else if (context.messageId) {
        messageId = context.messageId
      } else if (context.message_id) {
        messageId = context.message_id
      } else if (context.id) {
        messageId = context.id
      }

      this.logger.i(`üìù Callback details: userId=${userId}, messageId=${messageId}, answer=${userAnswer}`)

      if (messageId === undefined) {
        this.logger.e("‚ùå Could not determine messageId from callback context")
        await context.answerCallbackQuery()
        return
      }

      const validation = this.dependencies.captchaService.validateAnswer(
        userId,
        messageId,
        userAnswer,
      )

      this.logger.i(`üîç Validation result: isValid=${validation.isValid}, user found=${!!validation.user}`)

      if (validation.user) {
        if (validation.isValid) {
          this.logger.i("‚úÖ Captcha answer is CORRECT!")
          await this.handleCaptchaSuccess(validation.user)
        } else {
          this.logger.i("‚ùå Captcha answer is WRONG!")
          await this.handleCaptchaFailed(validation.user)
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
        await this.deleteMessage(validation.user.chatId, validation.user.questionId)
        this.dependencies.captchaService.removeRestrictedUser(userId)
        this.logger.i("üßπ User removed from restricted list")
      } else {
        this.logger.w("‚ö†Ô∏è No restricted user found for this callback")
      }

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
      await context.answerCallbackQuery()
    } catch (error) {
      this.logger.e("‚ùå Error handling callback query:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private async handleMessage(context: MessageContext<Bot>): Promise<void> {
    const fromUser = context.from
    const messageText = context.text
    const _chatType = context.chat?.type

    if (!fromUser || !messageText)
      return

    const userId = fromUser.id
    const chatId = context.chat?.id

    if (!chatId)
      return

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–•–†–ê–ù–ò–¢–°–Ø –í –ö–ï–®–ï)
    let userCounter = this.userMessageCounters.get(userId)
    if (!userCounter) {
      userCounter = {
        userId,
        messageCount: 0,
        spamCount: 0,
        username: fromUser.username,
        firstName: fromUser.firstName || "Unknown",
        lastActivity: Date.now(),
      }
      this.userMessageCounters.set(userId, userCounter)
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    userCounter.messageCount++

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    userCounter.username = fromUser.username
    userCounter.firstName = fromUser.firstName || "Unknown"
    userCounter.lastActivity = Date.now()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—å—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (userCounter && userCounter.messageCount < this.settings.maxMessagesForSpamCheck && this.dependencies.antiSpamService) {
      const spamCheck = await this.dependencies.antiSpamService.checkMessage(userId, messageText)

      if (spamCheck.isSpam) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–ø–∞–º–∞
        userCounter.spamCount++
        await this.handleSpamMessage(context, spamCheck.reason, userCounter)
        return
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º AI —á–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
    if (this.bot && this.dependencies.aiChatService) {
      const botInfo = await this.bot.api.getMe()
      const isMention = this.dependencies.aiChatService.isBotMention(messageText, botInfo.username)

      if (isMention || context.replyMessage?.from?.id === botInfo.id) {
        await this.handleAIChat(context)
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ AI —á–∞—Ç–∞
   */
  private async handleAIChat(context: any): Promise<void> {
    if (!this.dependencies.aiChatService)
      return

    try {
      const result = await this.dependencies.aiChatService.processMessage(
        context.from.id,
        context.chat.id,
        context.text,
        context.from.username,
        context.from.firstName,
        !!context.replyMessage,
      )

      if (!result.success) {
        if (result.reason) {
          await context.reply(result.reason)
        }
      }
      // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º - –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    } catch (error) {
      this.logger.e("Error handling AI chat:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∏–∫–æ–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –∫–∏–∫–∞
   */
  private async handleSpamMessage(context: any, reason?: string, userCounter?: UserMessageCounter): Promise<void> {
    try {
      const userId = context.from?.id
      const chatId = context.chat?.id
      const firstName = userCounter?.firstName || context.from?.firstName || "Unknown"
      const username = userCounter?.username || context.from?.username

      if (!userId || !chatId || !userCounter) {
        this.logger.w("Cannot handle spam message: missing userId, chatId or userCounter")
        return
      }

      this.logger.w(`Spam detected from user ${userId} (${firstName}). Reason: ${reason}`)

      // –£–¥–∞–ª—è–µ–º —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await context.delete()

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–ø–∞–º–∞
      userCounter.spamCount++

      if (userCounter.spamCount === 1) {
        // –ü–µ—Ä–≤–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        const fullName = firstName
        const displayName = username ? `${fullName}, @${username}` : fullName
        const warningText = `–•–º–º... üßê\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç [${displayName}] –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∞–º.\n\n–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. \n\n${this.config.ADMIN_USERNAME || ""}`

        if (!this.bot) {
          this.logger.e("Bot is not available for sending spam warning")
          return
        }

        const messageResult = await this.bot.api.sendMessage({
          chat_id: chatId,
          text: warningText,
          parse_mode: "HTML",
        })

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
          this.deleteMessage(chatId, messageResult.message_id)
        }, this.settings.errorMessageDeleteTimeoutMs)

        this.logger.w(`User ${userId} (${firstName}) received spam warning (${userCounter.spamCount}/2)`)
      } else {
        // –í—Ç–æ—Ä–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - –∫–∏–∫ –∏–∑ –≥—Ä—É–ø–ø—ã
        await this.kickUserFromChat(chatId, userId, firstName)

        // –£–¥–∞–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.userMessageCounters.delete(userId)

        this.logger.w(`User ${userId} (${firstName}) kicked from chat for repeated spam`)
      }
    } catch (error) {
      this.logger.e("Error handling spam message:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async handleRestrictedUser(context: any, restriction: any): Promise<void> {
    try {
      await context.delete()

      const escapedReason = this.escapeMarkdownV2(restriction.reason || "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
      const escapedAdminUsername = this.config.ADMIN_USERNAME ? this.escapeMarkdownV2(this.config.ADMIN_USERNAME) : ""

      const restrictionText = `–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã\\. \n\n–ü—Ä–∏—á–∏–Ω–∞: ${escapedReason}\n\n${escapedAdminUsername}`

      await context.reply(restrictionText, { parse_mode: "MarkdownV2" })
    } catch (error) {
      this.logger.e("Error handling restricted user:", error)
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private getUserOrCreate(fromUser: any): any {
    if (!fromUser?.id)
      return null

    if (!this.dependencies.repository?.exist?.(fromUser.id)) {
      return this.dependencies.repository?.newUser?.({
        id: fromUser.id,
        username: fromUser.username,
        firstname: fromUser.firstName,
      })
    }

    return this.dependencies.repository?.getUser?.(fromUser.id)
  }

  /**
   * –£—Å–ø–µ—à–Ω–∞—è –∫–∞–ø—á–∞
   */
  private async handleCaptchaSuccess(user: any): Promise<void> {
    try {
      await this.unrestrictUser(user.chatId, user.userId)

      // –í —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ –±—ã–ª–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É—Å–ø–µ—Ö–∞, —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º—É—Ç

      this.logger.i(`User ${user.userId} (${user.firstname}) passed captcha`)
    } catch (error) {
      this.logger.e("Error handling captcha success:", error)
    }
  }

  /**
   * –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–∞–ø—á–∞
   */
  private async handleCaptchaFailed(user: any): Promise<void> {
    try {
      await this.temporaryBanUser(user.chatId, user.userId)

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ MemberController
      const name = user.username ? `@${user.username}` : user.firstname
      const failText = `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, ${name} –≤—ã–±—Ä–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ üò¢`

      if (!this.bot) {
        this.logger.e("Bot is not available for sending captcha failed message")
        return
      }

      const messageResult = await this.bot.api.sendMessage({
        chat_id: user.chatId,
        text: failText,
        parse_mode: "HTML",
      })

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      setTimeout(() => {
        this.deleteMessage(user.chatId, messageResult.message_id)
      }, this.settings.errorMessageDeleteTimeoutMs)

      this.logger.w(`User ${user.userId} (${user.firstname}) failed captcha`)
    } catch (error) {
      this.logger.e("Error handling captcha failure:", error)
    }
  }

  /**
   * –¢–∞–π–º–∞—É—Ç –∫–∞–ø—á–∏
   */
  private async handleCaptchaTimeout(user: any): Promise<void> {
    try {
      await this.temporaryBanUser(user.chatId, user.userId)

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ MemberController
      const name = user.username ? `@${user.username}` : user.firstname
      const timeoutText = `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, ${name} –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ üßê`

      if (!this.bot) {
        this.logger.e("Bot is not available for sending captcha timeout message")
        return
      }

      const messageResult = await this.bot.api.sendMessage({
        chat_id: user.chatId,
        text: timeoutText,
        parse_mode: "HTML",
      })

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      setTimeout(() => {
        this.deleteMessage(user.chatId, messageResult.message_id)
      }, this.settings.errorMessageDeleteTimeoutMs)

      this.logger.w(`User ${user.userId} (${user.firstname}) captcha timeout`)
    } catch (error) {
      this.logger.e("Error handling captcha timeout:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
   */
  private async handleAIResponse(contextId: string, response: string, messageId: number): Promise<void> {
    if (!this.bot)
      return

    try {
      await this.bot.api.sendMessage({
        chat_id: Number.parseInt(contextId),
        text: response,
        reply_parameters: { message_id: messageId },
      })
    } catch (error) {
      this.logger.e("Error sending AI response:", error)
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
   */
  private async sendTypingAction(contextId: string): Promise<void> {
    if (!this.bot)
      return

    try {
      await this.bot.api.sendChatAction({
        chat_id: Number.parseInt(contextId),
        action: "typing",
      })
    } catch (error) {
      this.logger.e("Error sending typing action:", error)
    }
  }

  /**
   * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async restrictUser(chatId: number, userId: number): Promise<void> {
    if (!this.bot)
      return

    try {
      await this.bot.api.restrictChatMember({
        chat_id: chatId,
        user_id: userId,
        permissions: {
          can_send_messages: false,
          can_send_polls: false,
          can_send_other_messages: false,
          can_add_web_page_previews: false,
          can_change_info: false,
          can_invite_users: false,
          can_pin_messages: false,
        },
      })
    } catch (error) {
      this.logger.e("Error restricting user:", error)
    }
  }

  /**
   * –°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async unrestrictUser(chatId: number, userId: number): Promise<void> {
    if (!this.bot)
      return

    try {
      await this.bot.api.restrictChatMember({
        chat_id: chatId,
        user_id: userId,
        permissions: {
          can_send_messages: true,
          can_send_polls: true,
          can_send_other_messages: true,
          can_add_web_page_previews: true,
          can_change_info: false,
          can_invite_users: false,
          can_pin_messages: false,
        },
      })
    } catch (error) {
      this.logger.e("Error unrestricting user:", error)
    }
  }

  /**
   * –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
   */
  private async temporaryBanUser(chatId: number, userId: number): Promise<void> {
    if (!this.bot)
      return

    try {
      await this.bot.api.banChatMember({
        chat_id: chatId,
        user_id: userId,
        until_date: Math.floor(Date.now() / 1000) + this.settings.temporaryBanDurationSec,
      })
    } catch (error) {
      this.logger.e("Error banning user:", error)
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞ (–∫–∏–∫)
   */
  private async deleteUserFromChat(chatId: number, userId: number): Promise<void> {
    if (!this.bot)
      return

    try {
      await this.bot.api.banChatMember({
        chat_id: chatId,
        user_id: userId,
      })
    } catch (error) {
      this.logger.e("Error deleting user from chat:", error)
    }
  }

  /**
   * –ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–ø–∞–º (—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º)
   */
  private async kickUserFromChat(chatId: number, userId: number, userName: string): Promise<void> {
    if (!this.bot)
      return

    try {
      await this.bot.api.banChatMember({
        chat_id: chatId,
        user_id: userId,
      })
      this.logger.i(`User ${userName} (${userId}) kicked from chat ${chatId}`)

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–∞–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(async () => {
        await this.unbanUserFromChat(chatId, userId, userName)
      }, 5000)
    } catch (error) {
      this.logger.e(`Error kicking user ${userName} from chat:`, error)
    }
  }

  /**
   * –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞
   */
  private async unbanUserFromChat(chatId: number, userId: number, userName: string): Promise<void> {
    if (!this.bot)
      return

    try {
      await this.bot.api.unbanChatMember({
        chat_id: chatId,
        user_id: userId,
      })
      this.logger.i(`User ${userName} (${userId}) unbanned from chat ${chatId}`)
    } catch (error) {
      this.logger.e(`Error unbanning user ${userName} from chat:`, error)
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private async sendMessage(chatId: number, text: string): Promise<void> {
    if (!this.bot)
      return

    try {
      await this.bot.api.sendMessage({
        chat_id: chatId,
        text,
      })
    } catch (error) {
      this.logger.e("Error sending message:", error)
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private async deleteMessage(chatId: number, messageId: number): Promise<void> {
    if (!this.bot)
      return

    try {
      await this.bot.api.deleteMessage({
        chat_id: chatId,
        message_id: messageId,
      })
    } catch (error) {
      this.logger.e("Error deleting message:", error)
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ
   */
  getServiceInfo(): object {
    return {
      isRunning: this.isRunning,
      hasGramIO: this.hasGramIO,
      hasRepository: !!this.dependencies.repository,
      hasCaptchaService: !!this.dependencies.captchaService,
      hasAntiSpamService: !!this.dependencies.antiSpamService,
      hasAIChatService: !!this.dependencies.aiChatService,
      settings: this.settings,
      userMessageCountersCount: this.userMessageCounters.size,
      status: this.isRunning ? "active" : "inactive",
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
   */
  private async handleStartCommand(context: any): Promise<void> {
    const _chatId = context.chat?.id

    const helpText = "ü§ñ **–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!**\n\n"
      + "üõ°Ô∏è **–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ø–∞–º\n"
      + "üîê **–°–∏—Å—Ç–µ–º–∞ –∫–∞–ø—á–∏**: –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É\n"
      + "ü§ñ **–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫**: –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –≥—Ä—É–ø–ø–µ\n"
      + "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
      + "\n"
      + "üí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**:\n"
      + "‚Ä¢ `/help` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
      + "‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
      + "‚Ä¢ `/ban @user` - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n"
      + "‚Ä¢ `/unban @user` - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n"
      + "‚Ä¢ `/mute @user` - –∑–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n"
      + "‚Ä¢ `/unmute @user` - —Å–Ω—è—Ç—å –∑–∞–≥–ª—É—à–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"

    try {
      await context.reply(helpText, { parse_mode: "Markdown" })
    } catch (error) {
      this.logger.e("Error sending start message:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
   */
  private async handleHelpCommand(context: any): Promise<void> {
    const _chatId = context.chat?.id

    const helpText = "üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**"

    try {
      await context.reply(helpText, { parse_mode: "Markdown" })
    } catch (error) {
      this.logger.e("Error sending help message:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
   */
  private async handleStatsCommand(context: any): Promise<void> {
    const _chatId = context.chat?.id
    const adminCommands = "üîπ `/ban @user` - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\nüîπ `/unban @user` - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    try {
      const statsText = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n${adminCommands}`

      await context.reply(statsText, { parse_mode: "Markdown" })
    } catch (error) {
      this.logger.e("Error sending stats:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ban
   */
  private async handleBanCommand(context: any): Promise<void> {
    try {
      const userId = context.from?.id
      const chatId = context.chat?.id
      const isAdmin = context.from?.username === this.config.ADMIN_USERNAME?.replace("@", "")

      if (!isAdmin) {
        await context.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
      }

      const args = context.text.split(" ")
      if (args.length < 2) {
        await context.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban @username –∏–ª–∏ /ban –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
      }

      let targetUserId: number | null = null
      let targetUsername: string | null = null

      // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (context.replyMessage) {
        targetUserId = context.replyMessage.from?.id
        targetUsername = context.replyMessage.from?.username || context.replyMessage.from?.firstName
      } else {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        const username = args[1].replace("@", "")
        targetUsername = username
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ userId –ø–æ username —á–µ—Ä–µ–∑ repository
      }

      if (!targetUserId && !targetUsername) {
        await context.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        return
      }

      // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (targetUserId) {
        await this.deleteUserFromChat(chatId, targetUserId)
        this.dependencies.repository?.banUser?.(targetUserId, "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
      }

      await context.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUsername} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`)
      this.logger.i(`Admin ${userId} banned user ${targetUsername} (${targetUserId})`)
    } catch (error) {
      this.logger.e("Error handling ban command:", error)
      await context.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unban
   */
  private async handleUnbanCommand(context: any): Promise<void> {
    const _chatId = context.chat?.id
    const adminCommands = "üîπ `/ban @user` - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\nüîπ `/unban @user` - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    try {
      const commandText = `üìä **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞**\n\n${adminCommands}`

      await context.reply(commandText, { parse_mode: "Markdown" })
    } catch (error) {
      this.logger.e("Error in unban command:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mute
   */
  private async handleMuteCommand(context: any): Promise<void> {
    const _chatId = context.chat?.id

    const adminCommands = "üîπ `/mute @user` - –∑–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\nüîπ `/unmute @user` - —Å–Ω—è—Ç—å –∑–∞–≥–ª—É—à–µ–Ω–∏–µ"

    try {
      const commandText = `üìä **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞**\n\n${adminCommands}`

      await context.reply(commandText, { parse_mode: "Markdown" })
    } catch (error) {
      this.logger.e("Error in mute command:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unmute
   */
  private async handleUnmuteCommand(context: any): Promise<void> {
    const _chatId = context.chat?.id

    const adminCommands = "üîπ `/mute @user` - –∑–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\nüîπ `/unmute @user` - —Å–Ω—è—Ç—å –∑–∞–≥–ª—É—à–µ–Ω–∏–µ"

    try {
      const commandText = `üìä **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞**\n\n${adminCommands}`

      await context.reply(commandText, { parse_mode: "Markdown" })
    } catch (error) {
      this.logger.e("Error in unmute command:", error)
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  getSettings(): TelegramBotSettings {
    return { ...this.settings }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –ë–î)
   */
  updateSettings(newSettings: Partial<TelegramBotSettings>): void {
    this.settings = { ...this.settings, ...newSettings }
    this.logger.i("üìù Telegram bot settings updated:", newSettings)

    // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏ –≤ CaptchaService
    if (this.dependencies.captchaService
      && (newSettings.captchaTimeoutMs !== undefined || newSettings.captchaCheckIntervalMs !== undefined)) {
      const captchaSettings: any = {}
      if (newSettings.captchaTimeoutMs !== undefined) {
        captchaSettings.timeoutMs = newSettings.captchaTimeoutMs
      }
      if (newSettings.captchaCheckIntervalMs !== undefined) {
        captchaSettings.checkIntervalMs = newSettings.captchaCheckIntervalMs
      }

      // –ï—Å–ª–∏ CaptchaService –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç updateSettings
      if (typeof (this.dependencies.captchaService as any).updateSettings === "function") {
        (this.dependencies.captchaService as any).updateSettings(captchaSettings)
      }
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
   */
  async loadSettingsFromDatabase(): Promise<void> {
    try {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î
      // const settings = await this.dependencies.repository?.getSettings?.()
      // if (settings) {
      //   this.updateSettings(settings)
      // }

    } catch (error) {
      this.logger.e("‚ùå Error loading settings from database:", error)
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
   */
  async saveSettingsToDatabase(): Promise<void> {
    try {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ë–î
      // await this.dependencies.repository?.saveSettings?.(this.settings)

    } catch (error) {
      this.logger.e("‚ùå Error saving settings to database:", error)
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  getUserMessageCounters(): UserMessageCounter[] {
    return Array.from(this.userMessageCounters.values())
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  clearUserMessageCounter(userId: number): boolean {
    const cleared = this.userMessageCounters.delete(userId)
    if (cleared) {
      this.logger.i(`Cleared message counter for user ${userId}`)
    }
    return cleared
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–ª–µ–µ 7 –¥–Ω–µ–π)
   */
  cleanupOldUserCounters(): void {
    const now = Date.now()
    const maxAge = 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞

    for (const [userId, counter] of this.userMessageCounters.entries()) {
      if (now - counter.lastActivity > maxAge) {
        this.userMessageCounters.delete(userId)
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ —Å–ø–∞–º-–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
   */
  private startSpamCleanupTimer(): void {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(() => {
      this.cleanupOldUserCounters()
    }, 30 * 60 * 1000)
  }
}
