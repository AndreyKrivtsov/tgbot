import type { IService } from "../../../core/Container.js"
import type { Logger } from "../../../helpers/Logger.js"
import type { RedisService } from "../../RedisService/index.js"
import type { DeletionTask, TelegramBot } from "../types/index.js"
import { BOT_CONFIG } from "../../../constants.js"

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ retry –ª–æ–≥–∏–∫–∏
 *
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –•—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ + Redis –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
 * - –û–¥–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
 * - –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export class MessageDeletionManager implements IService {
  private pendingDeletions = new Map<number, DeletionTask>()
  private processingTimer?: NodeJS.Timeout
  private isRunning = false

  constructor(
    private redisService: RedisService,
    private bot: TelegramBot,
    private logger: Logger,
  ) {}

  /**
   * –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async scheduleDeletion(chatId: number, messageId: number, deleteAfterMs: number): Promise<void> {
    const task: DeletionTask = {
      messageId,
      chatId,
      deleteAt: Date.now() + deleteAfterMs,
      retryCount: 0,
    }

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –ò –≤ Redis
      this.pendingDeletions.set(messageId, task)
      await this.redisService.set(`deletion:${messageId}`, task, BOT_CONFIG.MESSAGE_DELETION_REDIS_TTL_SEC)

      this.logger.d(`üìÖ Scheduled deletion for message ${messageId} in ${deleteAfterMs}ms (chat: ${chatId})`)
    } catch (error) {
      this.logger.e(`‚ùå Failed to schedule deletion for message ${messageId}:`, error)
      // –£–±–∏—Ä–∞–µ–º –∏–∑ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis
      this.pendingDeletions.delete(messageId)
      throw error
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async initialize(): Promise<void> {
    this.logger.i("üöÄ Initializing MessageDeletionManager...")

    await this.loadPendingTasks()
    this.startProcessing()

    this.isRunning = true
    this.logger.i(`‚úÖ MessageDeletionManager started with ${this.pendingDeletions.size} pending tasks`)
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ (alias –¥–ª—è initialize)
   */
  async start(): Promise<void> {
    await this.initialize()
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
   */
  async stop(): Promise<void> {
    if (this.processingTimer) {
      clearInterval(this.processingTimer)
      this.processingTimer = undefined
    }

    this.isRunning = false
    this.logger.i(`üõë MessageDeletionManager stopped (${this.pendingDeletions.size} tasks pending)`)
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async dispose(): Promise<void> {
    await this.stop()
    this.pendingDeletions.clear()
    this.logger.i("üóëÔ∏è MessageDeletionManager disposed")
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  isHealthy(): boolean {
    return this.isRunning && this.processingTimer !== undefined
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ Redis –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
   */
  private async loadPendingTasks(): Promise<void> {
    try {
      const keys = await this.redisService.keys("deletion:*")
      let loaded = 0
      let expired = 0
      const now = Date.now()

      for (const key of keys) {
        const task = await this.redisService.get<DeletionTask>(key)
        if (task && task.messageId) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
          if (task.deleteAt < now - BOT_CONFIG.MESSAGE_DELETION_CLEANUP_MAX_AGE_MS) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            await this.redisService.del(key)
            expired++
          } else {
            this.pendingDeletions.set(task.messageId, task)
            loaded++
          }
        } else {
          // –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
          await this.redisService.del(key)
        }
      }

      if (loaded > 0) {
        this.logger.i(`üìÇ Loaded ${loaded} pending deletion tasks from Redis`)
      }
      if (expired > 0) {
        this.logger.i(`üßπ Cleaned up ${expired} expired tasks from Redis`)
      }
    } catch (error) {
      this.logger.e("‚ùå Failed to load pending tasks from Redis:", error)
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ø—É—Å—Ç—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
   */
  private startProcessing(): void {
    this.processingTimer = setInterval(() => {
      this.processExpiredTasks().catch((error) => {
        this.logger.e("‚ùå Error in deletion processing:", error)
      })
    }, BOT_CONFIG.MESSAGE_DELETION_CHECK_INTERVAL_MS)
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
   */
  private async processExpiredTasks(): Promise<void> {
    if (this.pendingDeletions.size === 0) {
      return // –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    }

    const now = Date.now()
    const expiredTasks: DeletionTask[] = []

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    for (const task of this.pendingDeletions.values()) {
      if (task.deleteAt <= now) {
        expiredTasks.push(task)
      }
    }

    if (expiredTasks.length === 0) {
      return // –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    }

    this.logger.d(`‚è∞ Processing ${expiredTasks.length} expired deletion tasks`)

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
    for (const task of expiredTasks) {
      await this.executeTask(task)
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω–∏—è
   */
  private async executeTask(task: DeletionTask): Promise<void> {
    try {
      await this.bot.deleteMessage(task.chatId, task.messageId)

      // –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ - —É–±–∏—Ä–∞–µ–º –∏–∑ –ø–∞–º—è—Ç–∏ –∏ Redis
      this.pendingDeletions.delete(task.messageId)
      await this.redisService.del(`deletion:${task.messageId}`)

      this.logger.i(`‚úÖ Message ${task.messageId} deleted successfully from chat ${task.chatId}`)
    } catch (error) {
      this.logger.e(`‚ùå Failed to delete message ${task.messageId} from chat ${task.chatId}:`, error)

      // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞?
      if (task.retryCount === 0) {
        task.retryCount = 1
        task.deleteAt = Date.now() + BOT_CONFIG.MESSAGE_DELETION_RETRY_DELAY_MS

        try {
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤ Redis
          await this.redisService.set(`deletion:${task.messageId}`, task, BOT_CONFIG.MESSAGE_DELETION_REDIS_TTL_SEC)
          this.logger.w(`üîÑ Scheduled retry for message ${task.messageId} in ${BOT_CONFIG.MESSAGE_DELETION_RETRY_DELAY_MS / 1000} seconds`)
        } catch (redisError) {
          this.logger.e(`‚ùå Failed to save retry task to Redis:`, redisError)
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Ç–æ–ª—å–∫–æ —Å –ø–∞–º—è—Ç—å—é
        }
      } else {
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–µ—É–¥–∞—á–∞ - —É–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É
        this.pendingDeletions.delete(task.messageId)

        try {
          await this.redisService.del(`deletion:${task.messageId}`)
        } catch (redisError) {
          this.logger.w(`‚ö†Ô∏è Failed to clean up task from Redis:`, redisError)
        }

        this.logger.e(`üíÄ Final failure to delete message ${task.messageId} after retry. Giving up.`)
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  getPendingCount(): number {
    return this.pendingDeletions.size
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ
   */
  async getServiceInfo(): Promise<object> {
    const now = Date.now()
    let pendingCount = 0
    let overdueCount = 0

    for (const task of this.pendingDeletions.values()) {
      if (task.deleteAt > now) {
        pendingCount++
      } else {
        overdueCount++
      }
    }

    return {
      name: "MessageDeletionManager",
      isRunning: this.isRunning,
      isHealthy: this.isHealthy(),
      totalTasks: this.pendingDeletions.size,
      pendingTasks: pendingCount,
      overdueTasks: overdueCount,
      memoryUsageKb: Math.round(this.pendingDeletions.size * 0.04), // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      config: {
        checkIntervalMs: BOT_CONFIG.MESSAGE_DELETION_CHECK_INTERVAL_MS,
        retryDelayMs: BOT_CONFIG.MESSAGE_DELETION_RETRY_DELAY_MS,
        redisTtlSec: BOT_CONFIG.MESSAGE_DELETION_REDIS_TTL_SEC,
      },
    }
  }
}
