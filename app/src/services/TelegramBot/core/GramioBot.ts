import { Bot } from "gramio"
import type { MessageContext, NewChatMembersContext } from "gramio"
import type { Logger } from "../../../helpers/Logger.js"
import { BOT_CONFIG } from "../../../constants.js"
import type { MessageDeletionManager } from "../features/MessageDeletionManager.js"
import { MessageFormatter } from "../utils/MessageFormatter.js"

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ GramIO —Å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º API
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */
export class GramioBot {
  private bot: Bot
  private logger: Logger
  private autoDeleteTimers = new Map<number, NodeJS.Timeout>() // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏
  private deletionManager?: MessageDeletionManager

  constructor(token: string, logger: Logger, deletionManager?: MessageDeletionManager) {
    this.bot = new Bot(token)
    this.logger = logger
    this.deletionManager = deletionManager
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
   */
  on<T extends keyof Events>(event: T, handler: (context: Events[T]) => void | Promise<void>): void {
    this.bot.on(event, handler)
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π allowed_updates –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  async start(): Promise<void> {
    try {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º allowed_updates –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–æ–±—ã—Ç–∏–π
      const allowedUpdates = [
        "message",
        "edited_message",
        "callback_query",
        "chat_member",
        "left_chat_member",
        "my_chat_member",
      ]

      this.logger.i("üîß Configuring bot with allowed_updates:", allowedUpdates)

      // –û—á–∏—â–∞–µ–º webhook –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º getUpdates —Å allowed_updates
      await this.bot.api.deleteWebhook({ drop_pending_updates: true })

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º allowed_updates —á–µ—Ä–µ–∑ getUpdates
      await this.bot.api.getUpdates({
        allowed_updates: allowedUpdates as any,
        limit: 1,
        timeout: 1,
      })

      this.logger.i("‚úÖ Bot configured with allowed_updates successfully")

      await this.bot.start()
    } catch (error) {
      this.logger.e("‚ùå Failed to start bot with allowed_updates:", error)
      throw error
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   */
  async stop(): Promise<void> {
    // –û—á–∏—â–∞–µ–º fallback —Ç–∞–π–º–µ—Ä—ã (MessageDeletionManager —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    for (const timer of this.autoDeleteTimers.values()) {
      clearTimeout(timer)
    }
    this.autoDeleteTimers.clear()

    await this.bot.stop()
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
   */
  async getMe() {
    return await this.bot.api.getMe()
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async sendMessage(params: SendMessageParams): Promise<MessageResult> {
    let text = params.text
    const parse_mode = params.parse_mode ?? "MarkdownV2"
    if (parse_mode === "MarkdownV2") {
      text = MessageFormatter.escapeMarkdownV2(text)
    } else if (parse_mode === "Markdown") {
      text = MessageFormatter.escapeMarkdown(text)
    }
    return await this.bot.api.sendMessage({
      ...params,
      text,
      parse_mode,
      disable_notification: true,
      link_preview_options: { is_disabled: true },
    })
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
   */
  async sendAutoDeleteMessage(
    params: SendMessageParams,
    deleteAfterMs: number,
  ): Promise<MessageResult> {
    const result = await this.bot.api.sendMessage({ ...params, disable_notification: true, link_preview_options: { is_disabled: true } })

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —É–¥–∞–ª–µ–Ω–∏–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (this.deletionManager) {
      try {
        await this.deletionManager.scheduleDeletion(params.chat_id, result.message_id, deleteAfterMs)
      } catch (error) {
        this.logger.e(`‚ùå Failed to schedule deletion via MessageDeletionManager for message ${result.message_id}:`, error)
        // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
        this.scheduleOldStyleDeletion(params.chat_id, result.message_id, deleteAfterMs)
      }
    } else {
      // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
      this.logger.w(`‚ö†Ô∏è MessageDeletionManager not available, using fallback timer for message ${result.message_id}`)
      this.scheduleOldStyleDeletion(params.chat_id, result.message_id, deleteAfterMs)
    }

    return result
  }

  /**
   * Fallback –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ç–∞–π–º–µ—Ä—ã
   */
  private scheduleOldStyleDeletion(chatId: number, messageId: number, deleteAfterMs: number): void {
    const timer = setTimeout(() => {
      this.deleteMessage(chatId, messageId)
        .catch((error) => {
          this.logger.w(`Failed to auto-delete message ${messageId}:`, error)
        })
        .finally(() => {
          this.autoDeleteTimers.delete(messageId)
        })
    }, deleteAfterMs)

    this.autoDeleteTimers.set(messageId, timer)
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async deleteMessage(chatId: number, messageId: number): Promise<void> {
    try {
      await this.bot.api.deleteMessage({
        chat_id: chatId,
        message_id: messageId,
      })
    } catch (error) {
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
      this.logger.d(`Message ${messageId} deletion failed (might be already deleted):`, error)
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ —á–∞—Ç (typing, uploading_photo, etc.)
   */
  async sendChatAction(chatId: number, action: ChatAction): Promise<void> {
    await this.bot.api.sendChatAction({
      chat_id: chatId,
      action,
    })
  }

  /**
   * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º—å—é—Ç) —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   */
  async restrictUser(chatId: number, userId: number, permissions: ChatPermissions, untilDate?: number): Promise<void> {
    await this.bot.api.restrictChatMember({
      chat_id: chatId,
      user_id: userId,
      permissions,
      until_date: untilDate,
    })
  }

  /**
   * –°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   */
  async unrestrictUser(chatId: number, userId: number, permissions: ChatPermissions): Promise<void> {
    await this.bot.api.restrictChatMember({
      chat_id: chatId,
      user_id: userId,
      permissions,
    })
  }

  /**
   * –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async banUser(chatId: number, userId: number, untilDate?: number): Promise<void> {
    await this.bot.api.banChatMember({
      chat_id: chatId,
      user_id: userId,
      until_date: untilDate,
    })
  }

  /**
   * –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async unbanUser(chatId: number, userId: number): Promise<void> {
    await this.bot.api.unbanChatMember({
      chat_id: chatId,
      user_id: userId,
    })
  }

  /**
   * –ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–∞–Ω + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–∞–Ω)
   */
  async kickUser(chatId: number, userId: number, autoUnbanDelayMs = 5000): Promise<void> {
    // –†–∞—Å—á–µ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: –º–∞–∫—Å–∏–º—É–º –∏–∑ autoUnbanDelayMs –∏ 40 —Å–µ–∫—É–Ω–¥
    const minSafetyMs = 40 * 1000 // 40 —Å–µ–∫—É–Ω–¥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const safetyDelayMs = Math.max(autoUnbanDelayMs, minSafetyMs)
    const safetyUntilDate = Math.floor(Date.now() / 1000) + Math.floor(safetyDelayMs / 1000)

    // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–º until_date
    await this.banUser(chatId, userId, safetyUntilDate)

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(async () => {
      try {
        await this.unbanUser(chatId, userId)
        this.logger.d(`User ${userId} unbanned after kick`)
      } catch (error) {
        this.logger.e(`Failed to unban user ${userId} after kick:`, error)
      }
    }, autoUnbanDelayMs)
  }

  /**
   * –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async temporaryBanUser(chatId: number, userId: number, durationSec: number): Promise<void> {
    const untilDate = Math.floor(Date.now() / 1000) + durationSec
    await this.banUser(chatId, userId, untilDate)
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
   */
  async sendTempMessage(
    chatId: number,
    text: string,
    deleteAfterMs: number,
    parseMode?: "HTML" | "Markdown" | "MarkdownV2",
  ): Promise<MessageResult> {
    return await this.sendAutoDeleteMessage({
      chat_id: chatId,
      text,
      parse_mode: parseMode,
    }, deleteAfterMs)
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
   * –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö (chatId > 0) —Å–æ–æ–±—â–µ–Ω–∏—è –ù–ï —É–¥–∞–ª—è—é—Ç—Å—è
   * –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö (chatId < 0) —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
   */
  async sendGroupMessage(
    params: SendMessageParams,
    deleteAfterMs: number = BOT_CONFIG.MESSAGE_DELETE_LONG_TIMEOUT_MS, // 60 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  ): Promise<MessageResult> {
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ID), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (params.chat_id > 0) {
      return await this.sendMessage(params)
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º
    return await this.sendAutoDeleteMessage(params, deleteAfterMs)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
   */
  async getChatAdministrators(chatId: number): Promise<any[]> {
    return await this.bot.api.getChatAdministrators({ chat_id: chatId })
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API (–¥–ª—è —Å–ª—É—á–∞–µ–≤, –Ω–µ –ø–æ–∫—Ä—ã—Ç—ã—Ö –æ–±–µ—Ä—Ç–∫–æ–π)
   */
  get api() {
    return this.bot.api
  }
}

// –¢–∏–ø—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
interface SendMessageParams {
  chat_id: number
  text: string
  parse_mode?: "HTML" | "Markdown" | "MarkdownV2"
  reply_parameters?: {
    message_id: number
  }
  reply_markup?: {
    inline_keyboard: any[][]
  }
}

interface MessageResult {
  message_id: number
  // –î—Ä—É–≥–∏–µ –ø–æ–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
}

interface ChatPermissions {
  can_send_messages?: boolean
  can_send_audios?: boolean
  can_send_documents?: boolean
  can_send_photos?: boolean
  can_send_videos?: boolean
  can_send_video_notes?: boolean
  can_send_voice_notes?: boolean
  can_send_polls?: boolean
  can_send_other_messages?: boolean
  can_add_web_page_previews?: boolean
  can_change_info?: boolean
  can_invite_users?: boolean
  can_pin_messages?: boolean
  can_manage_topics?: boolean
}

type ChatAction = "typing" | "upload_photo" | "record_video" | "upload_video" | "record_voice" | "upload_voice" | "upload_document" | "choose_sticker" | "find_location" | "record_video_note" | "upload_video_note"

// –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
interface Events {
  message: MessageContext<Bot>
  new_chat_members: NewChatMembersContext<Bot>
  left_chat_member: any
  chat_member: any
  callback_query: any
}
