import type { Logger } from "../../../helpers/Logger.js"
import type { TelegramBotSettings, TelegramChatMemberContext, TelegramLeftMemberContext, TelegramNewMembersContext } from "../types/index.js"
import type { CaptchaManager } from "../features/CaptchaManager.js"
import type { UserRestrictions } from "../utils/UserRestrictions.js"
import type { UserManager } from "../features/UserManager.js"
import type { CaptchaService } from "../../CaptchaService/index.js"
import type { ChatRepository } from "../../../repository/ChatRepository.js"

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
 */
export class MemberHandler {
  private logger: Logger
  private settings: TelegramBotSettings
  private captchaManager: CaptchaManager
  private userRestrictions: UserRestrictions
  private userManager: UserManager
  private chatRepository: ChatRepository
  private captchaService?: CaptchaService

  // –ö–µ—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ø—á–∏
  private recentlyProcessedUsers = new Map<number, number>() // userId -> timestamp
  private readonly DUPLICATE_PREVENTION_TIMEOUT_MS = 10000 // 10 —Å–µ–∫—É–Ω–¥

  constructor(
    logger: Logger,
    settings: TelegramBotSettings,
    captchaManager: CaptchaManager,
    userRestrictions: UserRestrictions,
    userManager: UserManager,
    chatRepository: ChatRepository,
    captchaService?: CaptchaService,
  ) {
    this.logger = logger
    this.settings = settings
    this.captchaManager = captchaManager
    this.userRestrictions = userRestrictions
    this.userManager = userManager
    this.chatRepository = chatRepository
    this.captchaService = captchaService
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏—è –∫–∞–ø—á–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private async initiateUserCaptchaWithDuplicateCheck(chatId: number, user: any, eventType: string): Promise<void> {
    const now = Date.now()
    const lastProcessed = this.recentlyProcessedUsers.get(user.id)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–∞–≤–Ω–æ
    if (lastProcessed && (now - lastProcessed) < this.DUPLICATE_PREVENTION_TIMEOUT_MS) {
      this.logger.i(`üîÑ User ${user.id} already processed recently (${Math.round((now - lastProcessed) / 1000)}s ago), skipping ${eventType} event`)
      return
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ CaptchaService
    if (this.captchaService?.isUserRestricted(user.id)) {
      this.logger.i(`üîÑ User ${user.id} already has active captcha, skipping ${eventType} event`)
      return
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    this.recentlyProcessedUsers.set(user.id, now)

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–µ—à–∞
    this.cleanupRecentlyProcessedUsers()

    // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∫–∞–ø—á—É
    this.logger.i(`üîê Initiating captcha for user ${user.id} via ${eventType} event`)
    await this.captchaManager.initiateUserCaptcha(chatId, user)
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞
   */
  private cleanupRecentlyProcessedUsers(): void {
    const now = Date.now()
    for (const [userId, timestamp] of this.recentlyProcessedUsers.entries()) {
      if (now - timestamp > this.DUPLICATE_PREVENTION_TIMEOUT_MS) {
        this.recentlyProcessedUsers.delete(userId)
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  async handleNewChatMembers(context: TelegramNewMembersContext): Promise<void> {
    try {
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      this.logger.i("üî• NEW_CHAT_MEMBERS event handler called!")
      this.logger.i(`Context type: ${typeof context}`)
      this.logger.i(`Context keys: ${Object.keys(context)}`)

      const chatId = context.chat.id
      this.logger.i(`Chat ID: ${chatId}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const chatExists = await this.chatRepository.chatExists(chatId)
      this.logger.i(`Chat exists in DB: ${chatExists}`)

      if (!chatExists) {
        this.logger.w(`Chat ${chatId} not found in database, skipping new members processing`)
        return
      }

      const newMembers = context.newChatMembers
      const messageId = (context as any).messageId || (context as any).message_id || context.id

      this.logger.i(`New members count: ${newMembers?.length || 0}`)
      this.logger.i(`Message ID: ${messageId}`)
      this.logger.i(`CaptchaManager available: ${this.captchaManager ? "YES" : "NO"}`)

      // –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
      if (this.settings.deleteSystemMessages && messageId) {
        await this.userRestrictions.deleteMessage(chatId, messageId)
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      if (newMembers?.length) {
        const realUsers = newMembers.filter((user: any) => !user.isBot())
        const bots = newMembers.filter((user: any) => user.isBot())

        if (realUsers.length > 0) {
          this.logger.i(`üéØ Processing ${realUsers.length} new members in chat ${chatId}`)

          // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          realUsers.forEach((user: any, index: number) => {
            this.logger.i(`Real user ${index + 1}: ${user.firstName || "NoName"} (ID: ${user.id}, @${user.username || "no_username"})`)
          })
        }

        if (bots.length > 0) {
          this.logger.d(`ü§ñ Skipping ${bots.length} bots`)
        }

        for (const user of realUsers) {
          this.logger.i(`üîê Initiating captcha for user ${user.id}`)
          await this.initiateUserCaptchaWithDuplicateCheck(chatId, user, "NEW_CHAT_MEMBERS")
        }
      } else {
        this.logger.w("No new members found in context!")
      }

      this.logger.i("‚úÖ handleNewChatMembers completed")
    } catch (error) {
      this.logger.e("‚ùå Error handling new chat members:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—à–µ–¥—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  async handleLeftChatMember(context: TelegramLeftMemberContext): Promise<void> {
    try {
      const chatId = context.chat?.id
      const leftUser = context.leftChatMember
      const messageId = context.id

      if (!chatId) {
        this.logger.w("No chat ID in left member context")
        return
      }

      // –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫–∏–¥–∞–Ω–∏–∏/–∏—Å–∫–ª—é—á–µ–Ω–∏–∏
      if (this.settings.deleteSystemMessages && messageId) {
        await this.userRestrictions.deleteMessage(chatId, messageId)
      }

      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (leftUser?.id) {
        await this.cleanupUserData(leftUser.id)
      }
    } catch (error) {
      this.logger.e("‚ùå Error handling left chat member:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞
   */
  async handleChatMember(context: TelegramChatMemberContext): Promise<void> {
    try {
      const chatId = context.chat?.id
      const newChatMember = context.newChatMember
      const oldChatMember = context.oldChatMember

      if (!chatId) {
        this.logger.w("No chat ID in chat member context")
        return
      }

      this.logger.i(`üîÑ CHAT_MEMBER event: ${oldChatMember?.status} -> ${newChatMember?.status}`)
      this.logger.i(`üîÑ CHAT_MEMBER event: ${oldChatMember.isMember()} -> ${newChatMember.isMember()}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const chatExists = await this.chatRepository.chatExists(chatId)
      if (!chatExists) {
        this.logger.w(`Chat ${chatId} not found in database, skipping chat member processing`)
        return
      }

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç –∏–ª–∏ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω
      if ((newChatMember?.status === "left" || newChatMember?.status === "kicked") || !newChatMember.isMember()) {
        const userId = newChatMember.user?.id
        if (userId) {
          this.logger.i(`üëã User ${userId} left/kicked from chat ${chatId}`)
          await this.cleanupUserData(userId)
        }
      }
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É (–Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫)
      else if (
        (oldChatMember?.status === "left" || oldChatMember?.status === "kicked")
        || (!oldChatMember.isMember() && newChatMember.isMember())
      ) {
        const user = newChatMember.user
        if (user && !user.isBot()) {
          this.logger.i(`üéØ New member detected via chat_member event: ${user.firstName || "NoName"} (ID: ${user.id}, @${user.username || "no_username"})`)

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ø—á—É –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –≤ handleNewChatMembers)
          this.logger.i(`üîê Initiating captcha for user ${user.id} via chat_member event`)

          // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ –≤ handleNewChatMembers
          await this.initiateUserCaptchaWithDuplicateCheck(chatId, user as any, "CHAT_MEMBER")
        } else if (user?.isBot()) {
          this.logger.d(`ü§ñ Skipping bot ${user.firstName} (ID: ${user.id})`)
        }
      }
    } catch (error) {
      this.logger.e("‚ùå Error handling chat member update:", error)
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ —á–∞—Ç–∞
   */
  private async cleanupUserData(userId: number): Promise<void> {
    try {
      let cleanedItems = 0

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö (–∫–∞–ø—á–∞)
      if (this.captchaService && this.captchaService.isUserRestricted(userId)) {
        this.captchaService.removeRestrictedUser(userId)
        cleanedItems++
      }

      // –£–¥–∞–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const hasCounter = await this.userManager.hasMessageCounter(userId)
      if (hasCounter) {
        await this.userManager.deleteMessageCounter(userId)
        cleanedItems++
      }

      if (cleanedItems > 0) {
        this.logger.d(`üßπ Cleaned ${cleanedItems} items for user ${userId}`)
      }
    } catch (error) {
      this.logger.e(`Error cleaning up data for user ${userId}:`, error)
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–ø—á–∞ —Å–µ—Ä–≤–∏—Å–∞
   */
  hasCaptchaService(): boolean {
    return this.captchaManager.isAvailable()
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  async getMemberStats(): Promise<{ restrictedUsers: number }> {
    const restrictedUsers = this.captchaService
      ? this.captchaService.getAllRestrictedUsers().length
      : 0

    return {
      restrictedUsers,
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥)
   */
  async forceCleanupUser(userId: number): Promise<boolean> {
    try {
      await this.cleanupUserData(userId)
      this.logger.i(`üßπ Force cleanup completed for user ${userId}`)
      return true
    } catch (error) {
      this.logger.e(`Error in force cleanup for user ${userId}:`, error)
      return false
    }
  }
}
