import type { Logger } from "../../../helpers/Logger.js"
import type { TelegramBotSettings, TelegramNewMembersContext } from "../types/index.js"
import type { CaptchaManager } from "../features/CaptchaManager.js"
import type { UserRestrictions } from "../utils/UserRestrictions.js"
import type { UserManager } from "../features/UserManager.js"
import type { CaptchaService } from "../../CaptchaService/index.js"
import type { ChatAiRepository } from "../../../repository/ChatAiRepository.js"

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
 */
export class MemberHandler {
  private logger: Logger
  private settings: TelegramBotSettings
  private captchaManager: CaptchaManager
  private userRestrictions: UserRestrictions
  private userManager: UserManager
  private chatRepository: ChatAiRepository
  private captchaService?: CaptchaService

  constructor(
    logger: Logger,
    settings: TelegramBotSettings,
    captchaManager: CaptchaManager,
    userRestrictions: UserRestrictions,
    userManager: UserManager,
    chatRepository: ChatAiRepository,
    captchaService?: CaptchaService,
  ) {
    this.logger = logger
    this.settings = settings
    this.captchaManager = captchaManager
    this.userRestrictions = userRestrictions
    this.userManager = userManager
    this.chatRepository = chatRepository
    this.captchaService = captchaService
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  async handleNewChatMembers(context: TelegramNewMembersContext): Promise<void> {
    try {
      this.logger.i("üéØ Processing new chat members...")

      const chatId = context.chat.id

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const chatExists = await this.chatRepository.chatExists(chatId)
      if (!chatExists) {
        this.logger.w(`Chat ${chatId} not found in database, skipping new members processing`)
        return
      }

      const newMembers = context.newChatMembers
      const messageId = (context as any).messageId || (context as any).message_id || context.id

      // –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
      if (this.settings.deleteSystemMessages && messageId) {
        await this.userRestrictions.deleteMessage(chatId, messageId)
      }

      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      this.logger.i("=== NEW CHAT MEMBERS EVENT ===")
      this.logger.i(`Chat ID: ${chatId}`)
      this.logger.i(`Message ID: ${messageId}`)
      this.logger.i(`New members count: ${newMembers?.length || 0}`)
      this.logger.i(`CaptchaManager available: ${this.captchaManager.isAvailable()}`)

      if (newMembers?.length) {
        newMembers.forEach((user: any, index: number) => {
          this.logger.i(`Member ${index + 1}: ${user.firstName} (ID: ${user.id}, isBot: ${user.isBot()})`)
        })

        for (const user of newMembers) {
          if (!user.isBot()) {
            this.logger.i(`üîê Processing captcha for new member: ${user.firstName} (ID: ${user.id})`)
            await this.captchaManager.initiateUserCaptcha(chatId, user)
          } else {
            this.logger.i(`ü§ñ Skipping captcha for bot: ${user.firstName} (ID: ${user.id})`)
          }
        }
      }

      this.logger.i("‚úÖ New chat members processing completed")
    } catch (error) {
      this.logger.e("‚ùå Error handling new chat members:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—à–µ–¥—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  async handleLeftChatMember(context: any): Promise<void> {
    try {
      const chatId = context.chat?.id
      const leftUser = context.leftChatMember
      const messageId = context.messageId || context.message_id || context.id

      if (!chatId) {
        this.logger.w("No chat ID in left member context")
        return
      }

      this.logger.i(`üëã User left chat: ${leftUser?.firstName} (ID: ${leftUser?.id})`)
      this.logger.i(`üí¨ Chat ID: ${chatId}, Message ID: ${messageId}`)

      // –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫–∏–¥–∞–Ω–∏–∏/–∏—Å–∫–ª—é—á–µ–Ω–∏–∏
      if (this.settings.deleteSystemMessages && messageId) {
        this.logger.i("üóëÔ∏è Deleting left chat member system message...")
        await this.userRestrictions.deleteMessage(chatId, messageId)
      }

      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (leftUser?.id) {
        await this.cleanupUserData(leftUser.id)
      }

      this.logger.i("‚úÖ Left chat member processing completed")
    } catch (error) {
      this.logger.e("‚ùå Error handling left chat member:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞
   */
  async handleChatMember(context: any): Promise<void> {
    try {
      this.logger.i("üîÑ Processing chat member update...")

      const chatId = context.chat?.id
      const newChatMember = context.newChatMember
      const oldChatMember = context.oldChatMember

      if (!chatId) {
        this.logger.w("No chat ID in chat member context")
        return
      }

      this.logger.i(`Chat member update - Chat ID: ${chatId}`)
      this.logger.i(`Old status: ${oldChatMember?.status}, New status: ${newChatMember?.status}`)

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç –∏–ª–∏ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω
      if (newChatMember?.status === "left" || newChatMember?.status === "kicked") {
        const userId = newChatMember.user?.id
        if (userId) {
          this.logger.i(`üëã User ${userId} left/kicked from chat ${chatId}`)
          await this.cleanupUserData(userId)
        }
      }

      this.logger.i("‚úÖ Chat member update processing completed")
    } catch (error) {
      this.logger.e("‚ùå Error handling chat member update:", error)
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ —á–∞—Ç–∞
   */
  private async cleanupUserData(userId: number): Promise<void> {
    try {
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö (–∫–∞–ø—á–∞)
      if (this.captchaService && this.captchaService.isUserRestricted(userId)) {
        this.logger.i(`üßπ Removing user ${userId} from captcha restrictions`)
        this.captchaService.removeRestrictedUser(userId)
      }

      // –£–¥–∞–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const hasCounter = await this.userManager.hasMessageCounter(userId)
      if (hasCounter) {
        await this.userManager.deleteMessageCounter(userId)
        this.logger.i(`üßπ Removed message counter for user ${userId}`)
      }
    } catch (error) {
      this.logger.e(`Error cleaning up data for user ${userId}:`, error)
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–ø—á–∞ —Å–µ—Ä–≤–∏—Å–∞
   */
  hasCaptchaService(): boolean {
    return this.captchaManager.isAvailable()
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  async getMemberStats(): Promise<{ totalUsers: number, restrictedUsers: number }> {
    const messageCounters = await this.userManager.getMessageCounters()
    const totalUsers = messageCounters.size
    const restrictedUsers = this.captchaService
      ? Array.from(messageCounters.keys()).filter(userId =>
        this.captchaService!.isUserRestricted(userId)).length
      : 0

    return {
      totalUsers,
      restrictedUsers,
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥)
   */
  async forceCleanupUser(userId: number): Promise<boolean> {
    try {
      await this.cleanupUserData(userId)
      this.logger.i(`Force cleanup completed for user ${userId}`)
      return true
    } catch (error) {
      this.logger.e(`Error in force cleanup for user ${userId}:`, error)
      return false
    }
  }
}
