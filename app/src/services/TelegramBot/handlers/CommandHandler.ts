import type { Logger } from "../../../helpers/Logger.js"
import type { AppConfig } from "../../../config.js"
import type { BotContext, TelegramMessageContext } from "../types/index.js"
import { MessageFormatter } from "../utils/MessageFormatter.js"
import type { UserRestrictions } from "../utils/UserRestrictions.js"
import type { UserManager } from "../features/UserManager.js"
import type { ChatAiRepository } from "../../../repository/ChatAiRepository.js"
import type { TelegramBotService } from "../index.js"

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
 */
export class CommandHandler {
  private logger: Logger
  private config: AppConfig
  private userRestrictions: UserRestrictions
  private userManager: UserManager
  private chatRepository: ChatAiRepository
  private botService: TelegramBotService

  constructor(
    logger: Logger,
    config: AppConfig,
    userRestrictions: UserRestrictions,
    userManager: UserManager,
    chatRepository: ChatAiRepository,
    botService: TelegramBotService,
  ) {
    this.logger = logger
    this.config = config
    this.userRestrictions = userRestrictions
    this.userManager = userManager
    this.chatRepository = chatRepository
    this.botService = botService
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
   */
  async handleStartCommand(context: BotContext): Promise<void> {
    try {
      const message = MessageFormatter.formatWelcomeMessage()
      await this.userRestrictions.sendMessage(context.chat!.id, message)
      this.logger.i(`Start command handled for chat ${context.chat!.id}`)
    } catch (error) {
      this.logger.e("Error handling start command:", error)
      const errorMessage = MessageFormatter.formatErrorMessage("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start")
      await this.userRestrictions.sendMessage(context.chat!.id, errorMessage)
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
   *
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–º–∞–Ω–¥:
   * - /register - –æ–±—â–∞—è –∫–æ–º–∞–Ω–¥–∞
   * - /register@test_ai_group_bot - –∫–æ–º–∞–Ω–¥–∞, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–æ—Ç—É
   *
   * @example
   * // –û–±–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –µ—Å–ª–∏ –Ω–∞—à –±–æ—Ç @test_ai_group_bot:
   * "/register" - –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è
   * "/register@test_ai_group_bot" - –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è
   * "/register@another_bot" - –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞
   */
  async handleCommand(context: TelegramMessageContext): Promise<void> {
    const text = context.text
    if (!text) {
      return
    }

    try {
      // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
      const parsed = this.parseCommand(text)
      if (!parsed) {
        return
      }

      const { command, targetBotUsername } = parsed

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏–∑ –∫–µ—à–∞
      const botInfo = await this.botService.getBotInfo()
      const botUsername = botInfo?.username

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—à–µ–º—É –±–æ—Ç—É
      const isForOurBot = await this.isCommandForOurBot(targetBotUsername, botUsername)
      if (!isForOurBot) {
        this.logger.d(`Command ${command} targeted to @${targetBotUsername}, but our bot is @${botUsername} - ignoring`)
        return
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã
      if (targetBotUsername) {
        this.logger.d(`Processing targeted command: ${command}@${targetBotUsername}`)
      } else {
        this.logger.d(`Processing general command: ${command}`)
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
      switch (command) {
        case "/start":
          await this.handleStartCommand(context)
          break
        case "/help":
          await this.handleHelpCommand(context)
          break
        case "/register":
          await this.handleRegisterCommand(context)
          break
        case "/unregister":
          await this.handleUnregisterCommand(context)
          break
        case "/ban":
          await this.handleBanCommand(context)
          break
        case "/unban":
          await this.handleUnbanCommand(context)
          break
        case "/mute":
          await this.handleMuteCommand(context)
          break
        case "/unmute":
          await this.handleUnmuteCommand(context)
          break
        default:
          // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
          break
      }
    } catch (error) {
      this.logger.e("Error in command handler:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
   */
  async handleHelpCommand(context: BotContext): Promise<void> {
    try {
      const message = MessageFormatter.formatHelpText()
      await this.userRestrictions.sendMessage(context.chat!.id, message)
      this.logger.i(`Help command handled for chat ${context.chat!.id}`)
    } catch (error) {
      this.logger.e("Error handling help command:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–∞–Ω–∞
   */
  async handleBanCommand(context: any): Promise<void> {
    if (!this.isAdminCommand(context)) {
      return
    }

    const chatId = context.chat?.id
    if (!chatId) {
      this.logger.w("No chat ID in ban command")
      return
    }

    try {
      const args = (context.text || "").split(" ")
      if (args.length < 2) {
        await this.userRestrictions.sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban @username –∏–ª–∏ /ban (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
        return
      }

      let targetUserId: number | null = null
      let targetUsername = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (context.replyMessage?.from) {
        targetUserId = context.replyMessage.from.id
        targetUsername = context.replyMessage.from.first_name || context.replyMessage.from.username || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
      } else if (args[1]) {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å username –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        const username = args[1].replace("@", "")
        targetUsername = username

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
        await this.userRestrictions.sendMessage(chatId, `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`)
        return
      } else {
        await this.userRestrictions.sendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
      }

      if (targetUserId) {
        // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.userRestrictions.kickUserFromChat(chatId, targetUserId, targetUsername)
        await this.userRestrictions.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUsername} –∑–∞–±–∞–Ω–µ–Ω`)

        this.logger.i(`üë§ Admin ${context.from?.first_name || context.from?.username} banned user ${targetUsername} (${targetUserId})`)
      }
    } catch (error) {
      this.logger.e("Error handling ban command:", error)
      await this.userRestrictions.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –±–∞–Ω–∞")
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unban
   */
  async handleUnbanCommand(context: BotContext): Promise<void> {
    const chatId = context.chat?.id

    if (!chatId) {
      return
    }

    try {
      const isAdmin = context.from?.username === this.config.ADMIN_USERNAME?.replace("@", "")

      if (!isAdmin) {
        const errorMessage = MessageFormatter.formatErrorMessage("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await this.userRestrictions.sendMessage(chatId, errorMessage)
        return
      }

      // –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ
      const message = "üîπ `/unban @user` - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      await this.userRestrictions.sendMessage(chatId, message)
    } catch (error) {
      this.logger.e("Error in unban command:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mute
   */
  async handleMuteCommand(context: BotContext): Promise<void> {
    const chatId = context.chat?.id

    if (!chatId) {
      return
    }

    try {
      const isAdmin = context.from?.username === this.config.ADMIN_USERNAME?.replace("@", "")

      if (!isAdmin) {
        const errorMessage = MessageFormatter.formatErrorMessage("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await this.userRestrictions.sendMessage(chatId, errorMessage)
        return
      }

      // –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ
      const message = "üîπ `/mute @user` - –∑–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      await this.userRestrictions.sendMessage(chatId, message)
    } catch (error) {
      this.logger.e("Error in mute command:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unmute
   */
  async handleUnmuteCommand(context: BotContext): Promise<void> {
    const chatId = context.chat?.id

    if (!chatId) {
      return
    }

    try {
      const isAdmin = context.from?.username === this.config.ADMIN_USERNAME?.replace("@", "")

      if (!isAdmin) {
        const errorMessage = MessageFormatter.formatErrorMessage("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await this.userRestrictions.sendMessage(chatId, errorMessage)
        return
      }

      // –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ
      const message = "üîπ `/unmute @user` - —Å–Ω—è—Ç—å –∑–∞–≥–ª—É—à–µ–Ω–∏–µ"
      await this.userRestrictions.sendMessage(chatId, message)
    } catch (error) {
      this.logger.e("Error in unmute command:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /register (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã)
   */
  async handleRegisterCommand(context: TelegramMessageContext): Promise<void> {
    const chat = context.chat
    const userId = context.from?.id

    if (!chat || !chat.id || !userId) {
      return
    }

    // –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö
    if (chat.id > 0) {
      await this.userRestrictions.sendMessage(chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
      return
    }

    try {
      const result = await this.registerChat(chat.id, userId, chat.title, chat.type)
      if (result.success) {
        await this.userRestrictions.sendMessage(chat.id, "‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±–æ—Ç–µ!")
        this.logger.i(`User ${userId} registered chat ${chat.id}`)
      } else {
        await this.userRestrictions.sendMessage(chat.id, `‚ùå ${result.message}`)
      }
    } catch (error) {
      this.logger.e("Error handling register command:", error)
      await this.userRestrictions.sendMessage(chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã")
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unregister (—Ä–∞–∑—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã)
   */
  async handleUnregisterCommand(context: TelegramMessageContext): Promise<void> {
    const chat = context.chat
    const userId = context.from?.id

    if (!chat || !chat.id || !userId) {
      return
    }

    // –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö
    if (chat.id > 0) {
      await this.userRestrictions.sendMessage(chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
      return
    }

    try {
      const result = await this.unregisterChat(chat.id, userId)
      if (result.success) {
        await this.userRestrictions.sendMessage(chat.id, "‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ –±–æ—Ç–∞!")
        this.logger.i(`User ${userId} unregistered chat ${chat.id}`)
      } else {
        await this.userRestrictions.sendMessage(chat.id, `‚ùå ${result.message}`)
      }
    } catch (error) {
      this.logger.e("Error handling unregister command:", error)
      await this.userRestrictions.sendMessage(chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã")
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–∞ –≤ –±–æ—Ç–µ
   */
  private async registerChat(chatId: number, userId: number, chatTitle?: string, chatType?: string): Promise<{ success: boolean, message?: string }> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–∞—Ç –≤ –±–∞–∑–µ
    const existingChat = await this.chatRepository.getChat(chatId)

    if (existingChat) {
      // –ï—Å–ª–∏ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω - —Å–æ–æ–±—â–∞–µ–º —á—Ç–æ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
      if (existingChat.active) {
        return { success: false, message: "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±–æ—Ç–µ" }
      }

      // –ï—Å–ª–∏ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
      this.logger.i(`Reactivating previously deactivated chat ${chatId}`)
      const reactivated = await this.chatRepository.activateChat(chatId)
      if (!reactivated) {
        return { success: false, message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö" }
      }

      this.logger.i(`Chat ${chatId} successfully reactivated`)
      return { success: true }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
    const admins = await this.botService.getBotApi().getChatAdministrators({
      chat_id: chatId,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const botId = await this.botService.getBotId()
    if (!botId) {
      return { success: false, message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ" }
    }

    const isBotAdmin = admins.some(admin => admin.user.id === botId)
    const isUserAdmin = admins.some(admin => admin.user.id === userId)

    if (!isBotAdmin || !isUserAdmin) {
      return { success: false, message: "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã –∏ –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã" }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const newChat = await this.chatRepository.createChat(chatId, chatTitle, chatType)
    if (!newChat) {
      return { success: false, message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö" }
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await this.chatRepository.createChatConfig(chatId)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫—Ä–æ–º–µ –±–æ—Ç–∞
    for (const admin of admins) {
      if (admin.user.id !== botId) {
        await this.chatRepository.addAdmin(chatId, admin.user.id)
      }
    }

    this.logger.i(`New chat ${chatId} successfully registered`)
    return { success: true }
  }

  /**
   * –†–∞–∑—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–∞ –∏–∑ –±–æ—Ç–∞
   */
  private async unregisterChat(chatId: number, userId: number): Promise<{ success: boolean, message?: string }> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç –≤ –±–∞–∑–µ
    const existingChat = await this.chatRepository.getChat(chatId)
    if (!existingChat) {
      return { success: false, message: "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±–æ—Ç–µ" }
    }

    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
      const admins = await this.botService.getBotApi().getChatAdministrators({
        chat_id: chatId,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
      const isUserAdmin = admins.some(admin => admin.user.id === userId)
      if (!isUserAdmin) {
        return { success: false, message: "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç —Ä–∞–∑—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—ë" }
      }

      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const deactivated = await this.chatRepository.deactivateChat(chatId)
      if (!deactivated) {
        this.logger.e(`Failed to deactivate chat ${chatId}`)
        return { success: false, message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö" }
      }

      this.logger.i(`Chat ${chatId} successfully deactivated by user ${userId}`)
      return { success: true }
    } catch (error) {
      this.logger.e(`Error during unregister process for chat ${chatId}:`, error)
      return { success: false, message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ" }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
   */
  private isAdmin(username?: string): boolean {
    return username === this.config.ADMIN_USERNAME?.replace("@", "")
  }

  private isAdminCommand(context: BotContext): boolean {
    return this.isAdmin(context.from?.username)
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–æ—Ç—É
   */
  private parseCommand(text: string): { command: string, targetBotUsername?: string } | null {
    const commandParts = text.split(" ")[0]?.split("@")
    if (!commandParts || commandParts.length === 0) {
      return null
    }

    const command = commandParts[0]?.toLowerCase()
    const targetBotUsername = commandParts[1] // –º–æ–∂–µ—Ç –±—ã—Ç—å undefined

    if (!command) {
      return null
    }

    return {
      command,
      targetBotUsername,
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—à–µ–º—É –±–æ—Ç—É
   */
  private async isCommandForOurBot(targetBotUsername?: string, botUsername?: string): Promise<boolean> {
    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ @username, —Ç–æ –æ–Ω–∞ –æ–±—â–∞—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if (!targetBotUsername) {
      return true
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—à–µ–º –±–æ—Ç–µ, —Ç–æ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    if (!botUsername) {
      this.logger.w("Bot username not available from cache, cannot verify targeted command")
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–∞ –∏–º–µ–Ω–Ω–æ –Ω–∞—à–µ–º—É –±–æ—Ç—É
    return targetBotUsername === botUsername
  }
}
