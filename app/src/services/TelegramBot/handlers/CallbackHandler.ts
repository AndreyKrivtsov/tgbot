import type { Logger } from "../../../helpers/Logger.js"
import type { CaptchaManager } from "../features/CaptchaManager.js"

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (inline –∫–Ω–æ–ø–∫–∏)
 */
export class CallbackHandler {
  private logger: Logger
  private captchaManager: CaptchaManager

  constructor(
    logger: Logger,
    captchaManager: CaptchaManager,
  ) {
    this.logger = logger
    this.captchaManager = captchaManager
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async handleCallback(context: any): Promise<void> {
    this.logger.i("üîò Processing callback query...")

    try {
      const callbackData = context.data
      const userId = context.from?.id

      if (!userId) {
        this.logger.w("No user ID in callback context")
        await this.answerCallback(context, "‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø callback'a –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
      if (callbackData.startsWith("captcha_")) {
        await this.handleCaptchaCallback(context, callbackData)
      } else {
        this.logger.w(`Unknown callback data format: ${callbackData}`)
        await this.answerCallback(context, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
      }
    } catch (error) {
      this.logger.e("‚ùå Error handling callback query:", error)
      await this.answerCallback(context, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –∫–∞–ø—á–∏
   */
  private async handleCaptchaCallback(context: any, callbackData: string): Promise<void> {
    try {
      const userId = context.from?.id
      if (!userId) {
        await this.answerCallback(context, "‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
      }

      // –ü–∞—Ä—Å–∏–º callback data –≤ —Ñ–æ—Ä–º–∞—Ç–µ: captcha_${userId}_${optionIndex}_${correct|wrong}
      const callbackParts = callbackData.split("_")
      if (callbackParts.length !== 4 || callbackParts[0] !== "captcha") {
        this.logger.e(`‚ùå Invalid callback data format: ${callbackData}`)
        await this.answerCallback(context, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
      }

      const callbackUserId = Number.parseInt(callbackParts[1] || "0")
      const isCorrect = callbackParts[3] === "correct"

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–≤–æ—é –∫–∞–ø—á—É
      if (callbackUserId !== userId) {
        this.logger.w(`‚ùå User ${userId} trying to answer captcha for user ${callbackUserId}`)
        await this.answerCallback(context, "–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–∞–ø—á–∞!")
        return
      }

      const success = await this.captchaManager.handleCaptchaCallback(context, callbackData)

      if (success) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ callback data
        const message = isCorrect
          ? "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
          : "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!"

        await this.answerCallback(context, message)
      } else {
        await this.answerCallback(context, "‚ö†Ô∏è –ö–∞–ø—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
      }
    } catch (error) {
      this.logger.e("Error handling captcha callback:", error)
      await this.answerCallback(context, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query
   */
  private async answerCallback(context: any, text: string): Promise<void> {
    try {
      if (context.answerCallbackQuery) {
        await context.answerCallbackQuery({ text })
      } else if (context.answer) {
        await context.answer(text)
      } else {
        this.logger.w("No method to answer callback query found in context")
      }
    } catch (error) {
      this.logger.e("Error answering callback query:", error)
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è callback data
   */
  private isValidCallbackData(callbackData: string): boolean {
    if (!callbackData || typeof callbackData !== "string") {
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    if (callbackData.startsWith("captcha_")) {
      const parts = callbackData.split("_")
      const userIdStr = parts[1]
      return Boolean(parts.length === 4 && userIdStr && !Number.isNaN(Number.parseInt(userIdStr, 10)))
    }

    return false
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ callback'e
   */
  parseCallbackData(callbackData: string): { type: string, userId?: number, action?: string } | null {
    if (!this.isValidCallbackData(callbackData)) {
      return null
    }

    if (callbackData.startsWith("captcha_")) {
      const parts = callbackData.split("_")
      const userIdStr = parts[1]

      if (!userIdStr) {
        return null
      }

      return {
        type: "captcha",
        userId: Number.parseInt(userIdStr, 10),
        action: parts[3], // "correct" –∏–ª–∏ "wrong"
      }
    }

    return null
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–ø—á–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  hasCaptchaManager(): boolean {
    return !!this.captchaManager && this.captchaManager.isAvailable()
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ callback'–æ–≤
   */
  getCallbackStats(): { captchaAvailable: boolean } {
    return {
      captchaAvailable: this.hasCaptchaManager(),
    }
  }
}
