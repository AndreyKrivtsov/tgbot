import type { Logger } from "../../../helpers/Logger.js"
import type { AppConfig } from "../../../config.js"
import type { AIChatService } from "../../AIChatService/index.js"
import type { TelegramBot, TelegramBotSettings, TelegramMessageContext } from "../types/index.js"
import type { SpamDetector } from "../features/SpamDetector.js"
import type { UserManager } from "../features/UserManager.js"
import type { CommandHandler } from "./CommandHandler.js"
import type { ChatAiRepository } from "../../../repository/ChatAiRepository.js"
import { MessageFormatter } from "../utils/MessageFormatter.js"

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
 */
export class MessageHandler {
  private logger: Logger
  private config: AppConfig
  private bot: TelegramBot
  private settings: TelegramBotSettings
  private spamDetector?: SpamDetector
  private userManager: UserManager
  private commandHandler?: CommandHandler
  private chatRepository: ChatAiRepository
  private isProcessing = false

  // AI Chat Service
  private chatService?: AIChatService

  constructor(
    logger: Logger,
    config: AppConfig,
    bot: TelegramBot,
    settings: TelegramBotSettings,
    userManager: UserManager,
    chatRepository: ChatAiRepository,
    spamDetector?: SpamDetector,
    commandHandler?: CommandHandler,
    chatService?: AIChatService,
  ) {
    this.logger = logger
    this.config = config
    this.bot = bot
    this.settings = settings
    this.userManager = userManager
    this.chatRepository = chatRepository
    this.spamDetector = spamDetector
    this.commandHandler = commandHandler
    this.chatService = chatService
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async handleMessage(context: TelegramMessageContext): Promise<void> {
    if (this.isProcessing) {
      this.logger.w("Message handler is already processing, skipping message")
      return
    }

    this.isProcessing = true

    try {
      const { from, chat, text: messageText } = context

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!from || !chat || !messageText) {
        this.logger.w("Incomplete message data, skipping")
        return
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      if (this.commandHandler && messageText.startsWith("/")) {
        await this.commandHandler.handleCommand(context)
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø)
      if (chat.id < 0) {
        const isActive = await this.chatRepository.isChatActive(chat.id)
        if (!isActive) {
          this.logger.w(`Chat ${chat.id} is not active or not found in database, skipping message processing`)
          return
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.userManager.updateMessageCounter(from.id, from.username, from.firstName)

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∞–º–∞
      if (this.spamDetector) {
        const userCounter = await this.userManager.getUserOrCreate(from.id, from.username, from.firstName)
        const spamResult = await this.spamDetector.checkMessage(from.id, messageText, userCounter)
        if (spamResult.isSpam) {
          await this.spamDetector.handleSpamMessage(context, spamResult.reason, userCounter)
          return
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
      const botInfo = await this.bot.api.getMe()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ AI
      if (this.chatService) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
        const isMention = this.chatService.isBotMention(messageText, botInfo.username)

        // –ï—Å–ª–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
        if (isMention) {
          return this.handleChat(context, messageText)
        }
      }
    } catch (error) {
      this.logger.e("Error handling message:", error)
    } finally {
      this.isProcessing = false
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ AI –æ—Ç–≤–µ—Ç–æ–≤
   */
  async handleAIResponse(contextId: string, response: string, _messageId: number): Promise<void> {
    try {
      const chatId = Number.parseInt(contextId)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ —á–∞—Ç
      await this.bot.api.sendMessage({
        chat_id: chatId,
        text: response,
        parse_mode: "Markdown",
      })

      this.logger.i(`‚úÖ AI response sent to chat ${chatId}: ${response.substring(0, 100)}${response.length > 100 ? "..." : ""}`)
    } catch (error) {
      this.logger.e("Error handling AI response:", error)

      // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      try {
        const chatId = Number.parseInt(contextId)
        await this.bot.api.sendMessage({
          chat_id: chatId,
          text: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ AI",
        })
      } catch (sendError) {
        this.logger.e("Failed to send error message:", sendError)
      }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ typing –¥–µ–π—Å—Ç–≤–∏—è
   */
  async sendTypingAction(contextId: string): Promise<void> {
    try {
      const chatId = Number.parseInt(contextId)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
      await this.bot.api.sendChatAction({
        chat_id: chatId,
        action: "typing",
      })

      this.logger.d(`üé≠ Typing action sent for context ${contextId}`)
    } catch (error) {
      this.logger.e("Error sending typing action:", error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ AI —á–∞—Ç–∞
   */
  private async handleChat(context: TelegramMessageContext, messageText: string): Promise<void> {
    if (!this.chatService || !context.from) {
      this.logger.w("Cannot handle AI chat: missing chatService or user info")
      return
    }

    try {
      const userId = context.from.id
      const chatId = context.chat.id
      const username = context.from.username
      const firstName = context.from.firstName

      this.logger.i(`ü§ñ Processing AI message from ${firstName} (${userId}) in chat ${chatId}: "${messageText.substring(0, 100)}${messageText.length > 100 ? "..." : ""}"`)

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI Chat Service
      const result = await this.chatService.processMessage(
        userId,
        chatId,
        messageText,
        username,
        firstName,
      )

      if (result.success) {
        this.logger.i(`‚úÖ Message queued for AI processing (position: ${result.queuePosition})`)
      } else {
        this.logger.w(`‚ùå Failed to queue AI message: ${result.reason}`)
      }
    } catch (error) {
      this.logger.e("Error handling AI chat:", error)
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  getMessageStats(): object {
    return {
      isProcessing: this.isProcessing,
      hasSpamDetector: !!this.spamDetector,
      hasCommandHandler: !!this.commandHandler,
      hasChatService: !!this.chatService,
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è AI —Å–µ—Ä–≤–∏—Å–∞
   */
  hasAIService(): boolean {
    return !!this.chatService
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞
   */
  setAIService(chatService: AIChatService): void {
    this.chatService = chatService
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async handleRestrictedUser(context: any, restriction: any): Promise<void> {
    try {
      if (context.delete) {
        await context.delete()
      }

      const escapedReason = MessageFormatter.escapeMarkdownV2(restriction.reason || "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
      const escapedAdminUsername = this.config.ADMIN_USERNAME
        ? MessageFormatter.escapeMarkdownV2(this.config.ADMIN_USERNAME)
        : ""

      const restrictionText = `–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã\\. \n\n–ü—Ä–∏—á–∏–Ω–∞: ${escapedReason}\n\n${escapedAdminUsername}`

      await context.reply(restrictionText, { parse_mode: "MarkdownV2" })
    } catch (error) {
      this.logger.e("Error handling restricted user:", error)
    }
  }
}
