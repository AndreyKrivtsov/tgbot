import type { EventBus } from "../../../core/EventBus.js"
import type { BanUserEvent, DeleteMessageEvent, MuteUserEvent, WarnUserEvent } from "../../../types/events.js"
import type { TelegramBot } from "../types/index.js"
import type { UserRestrictions } from "../utils/UserRestrictions.js"

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
 */
export class ModerationEventHandler {
  constructor(
    private bot: TelegramBot,
    private userRestrictions: UserRestrictions,
  ) {}

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–±—ã—Ç–∏—è–º
   */
  setupEventListeners(eventBus: EventBus): void {
    eventBus.on("moderation.ban", this.handleBanUser.bind(this))
    eventBus.on("moderation.mute", this.handleMuteUser.bind(this))
    eventBus.on("moderation.delete", this.handleDeleteMessage.bind(this))
    eventBus.on("moderation.warn", this.handleWarnUser.bind(this))
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async handleBanUser(event: BanUserEvent): Promise<void> {
    try {
      await this.userRestrictions.restrictUser(event.chatId, event.userId)

      await this.bot.sendMessage({
        chat_id: event.chatId,
        text: `üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${event.reason}`,
      })
    } catch {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private async handleMuteUser(event: MuteUserEvent): Promise<void> {
    try {
      await this.userRestrictions.restrictUser(event.chatId, event.userId)

      await this.bot.sendMessage({
        chat_id: event.chatId,
        text: `üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω: ${event.reason}`,
      })
    } catch {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private async handleDeleteMessage(event: DeleteMessageEvent): Promise<void> {
    try {
      await this.bot.deleteMessage(event.chatId, event.messageId)

      await this.bot.sendMessage({
        chat_id: event.chatId,
        text: `üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: ${event.reason}`,
      })
    } catch {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async handleWarnUser(event: WarnUserEvent): Promise<void> {
    try {
      await this.bot.sendMessage({
        chat_id: event.chatId,
        text: `‚ö†Ô∏è ${event.warningText}\n–ü—Ä–∏—á–∏–Ω–∞: ${event.reason}`,
        reply_parameters: {
          message_id: event.userId, // –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω messageId, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º userId
        },
      })
    } catch {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    }
  }
}
