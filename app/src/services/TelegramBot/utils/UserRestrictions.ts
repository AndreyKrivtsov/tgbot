import type { Logger } from "../../../helpers/Logger.js"
import type { TelegramBot } from "../types/index.js"
import { BOT_CONFIG, HTTP_CONFIG } from "../../../constants.js"

/**
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
const USER_RESTRICTIONS = {
  // –ü–æ–ª–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–¥–ª—è –∫–∞–ø—á–∏)
  RESTRICTED: {
    can_send_messages: false,
    can_send_audios: false,
    can_send_documents: false,
    can_send_photos: false,
    can_send_videos: false,
    can_send_video_notes: false,
    can_send_voice_notes: false,
    can_send_polls: false,
    can_send_other_messages: false,
    can_add_web_page_previews: false,
    can_change_info: false,
    can_invite_users: false,
    can_pin_messages: false,
    can_manage_topics: false,
  },
  // –ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ (–¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
  UNRESTRICTED: {
    can_send_messages: true,
    can_send_audios: true,
    can_send_documents: true,
    can_send_photos: true,
    can_send_videos: true,
    can_send_video_notes: true,
    can_send_voice_notes: true,
    can_send_polls: true,
    can_send_other_messages: true,
    can_add_web_page_previews: true,
    can_change_info: false, // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ –≥—Ä—É–ø–ø—ã
    can_invite_users: true, // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å
    can_pin_messages: false, // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å
    can_manage_topics: false, // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ø–∏–∫–∞–º–∏
  },
} as const

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Telegram —á–∞—Ç–µ
 */
export class UserRestrictions {
  private bot: TelegramBot
  private logger: Logger

  constructor(bot: TelegramBot, logger: Logger) {
    this.bot = bot
    this.logger = logger
  }

  /**
   * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º—å—é—Ç–∏–Ω–≥ –¥–ª—è –∫–∞–ø—á–∏)
   */
  async restrictUser(chatId: number, userId: number): Promise<void> {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ 5 –º–∏–Ω—É—Ç (–≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏)
      const untilDate = Math.floor(Date.now() / 1000) + (1 * 60) // +1 –º–∏–Ω—É—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

      await this.bot.restrictUser(chatId, userId, USER_RESTRICTIONS.RESTRICTED, untilDate)

      this.logger.i(`üîá User ${userId} restricted in chat ${chatId} for 5 minutes`)
    } catch (error) {
      this.logger.e(`Failed to restrict user ${userId}:`, error)
      throw error
    }
  }

  /**
   * –°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏)
   */
  async unrestrictUser(chatId: number, userId: number): Promise<void> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è
      await this.bot.restrictUser(chatId, userId, USER_RESTRICTIONS.UNRESTRICTED)

      this.logger.i(`‚úÖ User ${userId} unrestricted in chat ${chatId}`)
    } catch (error) {
      this.logger.e(`Failed to unrestrict user ${userId}:`, error)
      throw error
    }
  }

  /**
   * –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async temporaryBanUser(chatId: number, userId: number, durationSec: number): Promise<void> {
    try {
      await this.bot.temporaryBanUser(chatId, userId, durationSec)

      this.logger.i(`‚è∞ User ${userId} temporarily banned in chat ${chatId} for ${durationSec} seconds`)
    } catch (error) {
      this.logger.e(`Failed to temporarily ban user ${userId}:`, error)
      throw error
    }
  }

  /**
   * –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞
   * –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ kickUserFromChat –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.
   */
  async banUserFromChat(chatId: number, userId: number): Promise<void> {
    try {
      await this.bot.banUser(chatId, userId)

      this.logger.i(`üö´ User ${userId} permanently banned from chat ${chatId}`)
    } catch (error) {
      this.logger.e(`Failed to ban user ${userId}:`, error)
      throw error
    }
  }

  /**
   * –ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞ (–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–±–∞–Ω–æ–º)
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ —Å–ø–∞–º)
   */
  async kickUserFromChat(chatId: number, userId: number, userName: string): Promise<void> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –≤–º–µ—Å—Ç–æ kickUser –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      // –ë–∞–Ω –Ω–∞ 1 –º–∏–Ω—É—Ç—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–±–∞–Ω–æ–º
      const kickDurationSec = Math.floor(BOT_CONFIG.AUTO_UNBAN_DELAY_MS / 1000) // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º—Å –≤ —Å–µ–∫—É–Ω–¥—ã
      await this.bot.temporaryBanUser(chatId, userId, kickDurationSec)

      this.logger.i(`üë¢ User ${userName} (${userId}) kicked from chat ${chatId} for ${kickDurationSec} seconds`)
    } catch (error) {
      this.logger.e(`Failed to kick user ${userId}:`, error)
      throw error
    }
  }

  /**
   * –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async unbanUserFromChat(chatId: number, userId: number, userName: string): Promise<void> {
    try {
      await this.bot.unbanUser(chatId, userId)

      this.logger.i(`‚úÖ User ${userName} (${userId}) unbanned from chat ${chatId}`)
    } catch (error) {
      this.logger.e(`Failed to unban user ${userId}:`, error)
      throw error
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async sendMessage(chatId: number, text: string): Promise<void> {
    try {
      await this.bot.sendMessage({
        chat_id: chatId,
        text,
        parse_mode: "Markdown",
      })
    } catch (error) {
      this.logger.e("Failed to send message:", error)
      throw error
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
   * –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è, –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö - —É–¥–∞–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
   */
  async sendGroupMessage(chatId: number, text: string, parseMode: "HTML" | "Markdown" | "MarkdownV2" = "Markdown"): Promise<void> {
    try {
      await this.bot.sendGroupMessage({
        chat_id: chatId,
        text,
        parse_mode: parseMode,
      }, BOT_CONFIG.MESSAGE_DELETE_LONG_TIMEOUT_MS)
    } catch (error) {
      this.logger.e("Failed to send group message:", error)
      throw error
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async deleteMessage(chatId: number, messageId: number): Promise<void> {
    try {
      await this.bot.deleteMessage(chatId, messageId)
    } catch (error) {
      this.logger.e("Failed to delete message:", error)
      throw error
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
   */
  async sendTypingAction(chatId: number): Promise<void> {
    try {
      await this.bot.sendChatAction(chatId, "typing")
    } catch (error) {
      this.logger.e("Failed to send typing action:", error)
    }
  }
}
