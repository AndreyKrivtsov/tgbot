import type { Logger } from "../../../helpers/Logger.js"
import type { TelegramBotDependencies, TelegramBotSettings } from "../types/index.js"
import { BOT_CONFIG } from "../../../constants.js"

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è Telegram –±–æ—Ç–∞
 */
export class SettingsManager {
  private settings: TelegramBotSettings
  private logger: Logger
  private dependencies: TelegramBotDependencies

  constructor(
    initialSettings: Partial<TelegramBotSettings>,
    logger: Logger,
    dependencies: TelegramBotDependencies = {},
  ) {
    this.logger = logger
    this.dependencies = dependencies

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.settings = {
      captchaTimeoutMs: BOT_CONFIG.CAPTCHA_TIMEOUT_MS,
      captchaCheckIntervalMs: BOT_CONFIG.CAPTCHA_CHECK_INTERVAL_MS,
      errorMessageDeleteTimeoutMs: BOT_CONFIG.ERROR_MESSAGE_DELETE_TIMEOUT_MS,
      deleteSystemMessages: true, // –£–¥–∞–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      temporaryBanDurationSec: BOT_CONFIG.TEMPORARY_BAN_DURATION_SEC,
      autoUnbanDelayMs: BOT_CONFIG.AUTO_UNBAN_DELAY_MS,
      maxMessagesForSpamCheck: BOT_CONFIG.MAX_MESSAGES_FOR_SPAM_CHECK,
      ...initialSettings,
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  getSettings(): TelegramBotSettings {
    return { ...this.settings }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  updateSettings(newSettings: Partial<TelegramBotSettings>): void {
    this.settings = { ...this.settings, ...newSettings }
    this.logger.i("üìù Telegram bot settings updated")

    // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏ –≤ CaptchaService
    if (this.dependencies.captchaService
      && (newSettings.captchaTimeoutMs !== undefined || newSettings.captchaCheckIntervalMs !== undefined)) {
      const captchaSettings: any = {}
      if (newSettings.captchaTimeoutMs !== undefined) {
        captchaSettings.timeoutMs = newSettings.captchaTimeoutMs
      }
      if (newSettings.captchaCheckIntervalMs !== undefined) {
        captchaSettings.checkIntervalMs = newSettings.captchaCheckIntervalMs
      }

      // –ï—Å–ª–∏ CaptchaService –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç updateSettings
      if (typeof (this.dependencies.captchaService as any).updateSettings === "function") {
        (this.dependencies.captchaService as any).updateSettings(captchaSettings)
      }
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
   */
  async loadSettingsFromDatabase(): Promise<void> {
    try {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î
      // const settings = await this.dependencies.repository?.getSettings?.()
      // if (settings) {
      //   this.updateSettings(settings)
      // }
      this.logger.i("Settings loading from database is not implemented yet")
    } catch (error) {
      this.logger.e("‚ùå Error loading settings from database:", error)
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
   */
  async saveSettingsToDatabase(): Promise<void> {
    try {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ë–î
      // await this.dependencies.repository?.saveSettings?.(this.settings)
      this.logger.i("Settings saving to database is not implemented yet")
    } catch (error) {
      this.logger.e("‚ùå Error saving settings to database:", error)
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  getSetting<K extends keyof TelegramBotSettings>(key: K): TelegramBotSettings[K] {
    return this.settings[key]
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  setSetting<K extends keyof TelegramBotSettings>(key: K, value: TelegramBotSettings[K]): void {
    this.settings[key] = value
    this.logger.i(`Setting ${key} updated to ${value}`)
  }

  /**
   * –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  resetToDefault(): void {
    this.settings = {
      captchaTimeoutMs: BOT_CONFIG.CAPTCHA_TIMEOUT_MS,
      captchaCheckIntervalMs: BOT_CONFIG.CAPTCHA_CHECK_INTERVAL_MS,
      errorMessageDeleteTimeoutMs: BOT_CONFIG.ERROR_MESSAGE_DELETE_TIMEOUT_MS,
      deleteSystemMessages: true,
      temporaryBanDurationSec: BOT_CONFIG.TEMPORARY_BAN_DURATION_SEC,
      autoUnbanDelayMs: BOT_CONFIG.AUTO_UNBAN_DELAY_MS,
      maxMessagesForSpamCheck: BOT_CONFIG.MAX_MESSAGES_FOR_SPAM_CHECK,
    }
    this.logger.i("Settings reset to default values")
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  validateSettings(): boolean {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    return true
  }
}
