import type { IService } from "../core/Container.js"
import type { Logger } from "../helpers/Logger.js"
import type { AppConfig } from "../config.js"

interface CaptchaDependencies {
  repository?: any
  telegramBot?: any
}

interface CaptchaChallenge {
  question: number[]
  answer: number
  options: number[]
}

interface RestrictedUser {
  userId: number
  chatId: number
  questionId: number
  answer: number
  username?: string
  firstname: string
  timestamp: number
  isAnswered: boolean
}

/**
 * –°–µ—Ä–≤–∏—Å –∫–∞–ø—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export class CaptchaService implements IService {
  private config: AppConfig
  private logger: Logger
  private dependencies: CaptchaDependencies
  private restrictedUsers: Map<number, RestrictedUser> = new Map()
  private isMonitoring = false

  constructor(config: AppConfig, logger: Logger, dependencies: CaptchaDependencies = {}) {
    this.config = config
    this.logger = logger
    this.dependencies = dependencies
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ø—á–∏
   */
  async initialize(): Promise<void> {
    this.logger.i("üîê Initializing captcha service...")
    this.logger.i("‚úÖ Captcha service initialized")
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ø—á–∏
   */
  async start(): Promise<void> {
    this.logger.i("üöÄ Starting captcha service...")
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∞–π–º–∞—É—Ç–æ–≤
    this.startTimeoutMonitoring()
    
    this.logger.i("‚úÖ Captcha service started")
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ø—á–∏
   */
  async stop(): Promise<void> {
    this.logger.i("üõë Stopping captcha service...")
    this.isMonitoring = false
    this.restrictedUsers.clear()
    this.logger.i("‚úÖ Captcha service stopped")
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async dispose(): Promise<void> {
    this.logger.i("üóëÔ∏è Disposing captcha service...")
    await this.stop()
    this.logger.i("‚úÖ Captcha service disposed")
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  isHealthy(): boolean {
    return true
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ø—á–∏
   */
  generateCaptcha(): CaptchaChallenge {
    const randomOption = (from: number, to: number) => {
      return Math.floor(Math.random() * (to - from + 1)) + from
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É —Å–ª–æ–∂–µ–Ω–∏—è
    const num1 = randomOption(1, 10)
    const num2 = randomOption(1, 10)
    const question: number[] = [num1, num2]
    const answer = num1 + num2

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    const options: number[] = []
    while (options.length < 3) {
      const option = randomOption(1, 20)
      if (!options.includes(option) && option !== answer) {
        options.push(option)
      }
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    const insertIndex = randomOption(0, 3)
    options.splice(insertIndex, 0, answer)

    return { question, answer, options }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö
   */
  addRestrictedUser(
    userId: number,
    chatId: number,
    questionId: number,
    answer: number,
    username?: string,
    firstname: string = "Unknown"
  ): void {
    const restrictedUser: RestrictedUser = {
      userId,
      chatId,
      questionId,
      answer,
      username,
      firstname,
      timestamp: Date.now(),
      isAnswered: false
    }

    this.restrictedUsers.set(userId, restrictedUser)
    
    this.logger.d(`User ${userId} (${firstname}) restricted in chat ${chatId}`)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–ø—á—É
   */
  validateAnswer(userId: number, questionId: number, userAnswer: number): {
    isValid: boolean
    user?: RestrictedUser
  } {
    const restrictedUser = this.restrictedUsers.get(userId)

    if (!restrictedUser) {
      return { isValid: false }
    }

    if (restrictedUser.isAnswered) {
      return { isValid: false, user: restrictedUser }
    }

    if (restrictedUser.questionId !== questionId) {
      return { isValid: false, user: restrictedUser }
    }

    const isCorrect = restrictedUser.answer === userAnswer
    restrictedUser.isAnswered = true

    this.logger.i(
      `Captcha answer from ${restrictedUser.firstname} (${userId}): ${userAnswer} - ${isCorrect ? 'CORRECT' : 'WRONG'}`
    )

    return { isValid: isCorrect, user: restrictedUser }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö
   */
  removeRestrictedUser(userId: number): RestrictedUser | undefined {
    const user = this.restrictedUsers.get(userId)
    this.restrictedUsers.delete(userId)
    
    if (user) {
      this.logger.d(`User ${userId} removed from restricted list`)
    }
    
    return user
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  isUserRestricted(userId: number): boolean {
    return this.restrictedUsers.has(userId)
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getRestrictedUser(userId: number): RestrictedUser | undefined {
    return this.restrictedUsers.get(userId)
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  getAllRestrictedUsers(): RestrictedUser[] {
    return Array.from(this.restrictedUsers.values())
  }

  /**
   * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∞–π–º–∞—É—Ç–æ–≤ –∫–∞–ø—á–∏
   */
  private startTimeoutMonitoring(): void {
    if (this.isMonitoring) return

    this.isMonitoring = true
    const timeoutDuration = 60000 // 60 —Å–µ–∫—É–Ω–¥

    const checkTimeouts = () => {
      if (!this.isMonitoring) return

      const now = Date.now()
      const expiredUsers: RestrictedUser[] = []

      for (const user of this.restrictedUsers.values()) {
        if (!user.isAnswered && now > user.timestamp + timeoutDuration) {
          expiredUsers.push(user)
        }
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–∞–ø—á–∏
      for (const user of expiredUsers) {
        this.handleCaptchaTimeout(user)
        this.restrictedUsers.delete(user.userId)
      }

      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      setTimeout(checkTimeouts, 5000)
    }

    checkTimeouts()
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∫–∞–ø—á–∏
   */
  private handleCaptchaTimeout(user: RestrictedUser): void {
    this.logger.w(`Captcha timeout for user ${user.userId} (${user.firstname}) in chat ${user.chatId}`)
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è TelegramBotService
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç EventBus –∏–ª–∏ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤
    this.onCaptchaTimeout?.(user)
  }

  /**
   * –ö–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ (–±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω TelegramBotService)
   */
  public onCaptchaTimeout?: (user: RestrictedUser) => void

  /**
   * –ö–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –∫–∞–ø—á–∏ (–±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω TelegramBotService)
   */
  public onCaptchaSuccess?: (user: RestrictedUser) => void

  /**
   * –ö–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–∞–ø—á–∏ (–±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω TelegramBotService)
   */
  public onCaptchaFailed?: (user: RestrictedUser) => void

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–ø—á–∏
   */
  getStats(): object {
    return {
      restrictedUsers: this.restrictedUsers.size,
      isMonitoring: this.isMonitoring,
      serviceStatus: "active"
    }
  }
} 