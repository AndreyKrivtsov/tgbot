import type { IService } from "../../core/Container.js"
import type { Logger } from "../../helpers/Logger.js"
import type { AppConfig } from "../../config.js"

interface ApiServiceDependencies {
  database?: any
  repository?: any
  telegramBot?: any
}

interface BotConfig {
  // Captcha –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  captchaEnabled: boolean
  captchaTimeout: number // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  
  // –ê–Ω—Ç–∏—Å–ø–∞–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏  
  antispamEnabled: boolean
  antispamThreshold: number
  
  // AI —á–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  aiChatEnabled: boolean
  aiDailyLimit: number
  aiCurrentUsage: number
  
  // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  welcomeMessage: string
  adminUsername: string
  logLevel: number
}

/**
 * –°–µ—Ä–≤–∏—Å API-—Å–µ—Ä–≤–µ—Ä–∞ —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é –¥–ª—è Telegram –±–æ—Ç–∞
 * –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Fastify:
 * npm install fastify @fastify/cors @fastify/static
 */
export class ApiServerService implements IService {
  private config: AppConfig
  private logger: Logger
  private dependencies: ApiServiceDependencies
  private isRunning = false
  private hasFastify = false
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ (–±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ë–î)
  private botConfig: BotConfig

  constructor(config: AppConfig, logger: Logger, dependencies: ApiServiceDependencies = {}) {
    this.config = config
    this.logger = logger
    this.dependencies = dependencies
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
    this.botConfig = {
      captchaEnabled: true,
      captchaTimeout: 60,
      antispamEnabled: true,
      antispamThreshold: 5,
      aiChatEnabled: true,
      aiDailyLimit: 1500,
      aiCurrentUsage: 0,
      welcomeMessage: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É:",
      adminUsername: this.config.ADMIN_USERNAME || "",
      logLevel: 2
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API-—Å–µ—Ä–≤–µ—Ä–∞
   */
  async initialize(): Promise<void> {
    this.logger.i("üåê Initializing API server...")
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Fastify
      try {
        await import("fastify")
        this.hasFastify = true
        this.logger.i("‚úÖ Fastify available - API server can be enabled")
      } catch (error) {
        this.logger.w("‚ö†Ô∏è Fastify not available. API server disabled.")
        this.logger.w("üìã To enable web interface:")
        this.logger.w("   1. Update Node.js to v18+ or v20+")
        this.logger.w("   2. Run: npm install fastify @fastify/cors @fastify/static")
        this.logger.w("   3. Restart the application")
      }
      
      this.logger.i("‚úÖ API server service initialized")
    }
    catch (error) {
      this.logger.e("‚ùå Failed to initialize API server:", error)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ API-—Å–µ—Ä–≤–µ—Ä–∞
   */
  async start(): Promise<void> {
    this.logger.i("üöÄ Starting API server...")
    
    if (!this.hasFastify) {
      this.logger.w("üö´ API server not available - Fastify not installed")
      this.logger.i("ü§ñ Bot continues to work without web interface")
      return
    }

    try {
      // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞ Fastify —Å–µ—Ä–≤–µ—Ä–∞
      this.isRunning = true
      this.logger.i(`‚úÖ API server started on http://${this.config.WEB_HOST}:${this.config.WEB_PORT}`)
      this.logger.i(`üì± Telegram WebApp URL: http://${this.config.WEB_HOST}:${this.config.WEB_PORT}/admin`)
    }
    catch (error) {
      this.logger.e("‚ùå Failed to start API server:", error)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API-—Å–µ—Ä–≤–µ—Ä–∞
   */
  async stop(): Promise<void> {
    if (this.isRunning) {
      this.logger.i("üõë Stopping API server...")
      this.isRunning = false
      this.logger.i("‚úÖ API server stopped")
    }
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async dispose(): Promise<void> {
    this.logger.i("üóëÔ∏è Disposing API server service...")
    await this.stop()
    this.logger.i("‚úÖ API server service disposed")
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
   */
  isHealthy(): boolean {
    return true // –°–µ—Ä–≤–∏—Å –≤—Å–µ–≥–¥–∞ –∑–¥–æ—Ä–æ–≤, –¥–∞–∂–µ –µ—Å–ª–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
   */
  getServerInfo(): object {
    return {
      isRunning: this.isRunning,
      hasFastify: this.hasFastify,
      host: this.config.WEB_HOST,
      port: this.config.WEB_PORT,
      hasDatabase: !!this.dependencies.database,
      hasRepository: !!this.dependencies.repository,
      hasTelegramBot: !!this.dependencies.telegramBot,
      status: this.hasFastify ? "ready" : "disabled",
      note: this.hasFastify ? "Web interface ready" : "Install Fastify to enable web interface"
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
   */
  getBotConfig(): BotConfig {
    return { ...this.botConfig }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
   */
  updateBotConfig(updates: Partial<BotConfig>): void {
    this.botConfig = { ...this.botConfig, ...updates }
    this.logger.i("Bot configuration updated:", updates)
    // TODO: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    // TODO: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  }
} 