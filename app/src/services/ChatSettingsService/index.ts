import type { IService } from "../../core/Container.js"
import type { Logger } from "../../helpers/Logger.js"
import type { ChatRepository } from "../../repository/ChatRepository.js"
import type { AIChatServiceRefactored } from "../AIChatService/AIChatServiceRefactored.js"
import type { Chat, ChatConfig, SystemPromptData } from "../../db/schema.js"

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–∞—Ç–æ–≤
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∫–µ—à–∞–º–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
 */
export class ChatSettingsService implements IService {
  private logger: Logger
  private chatRepository: ChatRepository
  private aiChatService?: AIChatServiceRefactored

  constructor(
    logger: Logger,
    chatRepository: ChatRepository,
    aiChatService?: AIChatServiceRefactored,
  ) {
    this.logger = logger
    this.chatRepository = chatRepository
    this.aiChatService = aiChatService
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ AIChatService –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ—à–µ–π
   */
  setAIChatService(aiChatService: AIChatServiceRefactored): void {
    this.aiChatService = aiChatService
  }

  async initialize(): Promise<void> {
    this.logger.i("üîß Initializing ChatSettingsService...")
  }

  async start(): Promise<void> {
    this.logger.i("‚úÖ ChatSettingsService started")
  }

  async stop(): Promise<void> {
    this.logger.i("üõë ChatSettingsService stopped")
  }

  async dispose(): Promise<void> {
    this.logger.i("üóëÔ∏è ChatSettingsService disposed")
  }

  isHealthy(): boolean {
    return true
  }

  // ==========================================================================
  // –ß–¢–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö
  // ==========================================================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (—á–∞—Ç + –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)
   */
  async getChatSettings(chatId: number): Promise<{ chat: Chat | null, config: ChatConfig | null }> {
    return await this.chatRepository.getChatWithConfig(chatId)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ò–ò –¥–ª—è —á–∞—Ç–∞
   */
  async getChatConfig(chatId: number): Promise<ChatConfig | null> {
    return await this.chatRepository.getChatConfig(chatId)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∫–ª—é—á–µ–Ω –ª–∏ –ò–ò –≤ —á–∞—Ç–µ
   */
  async isAiEnabled(chatId: number): Promise<boolean> {
    const config = await this.getChatConfig(chatId)
    return config?.aiEnabled ?? true
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –¥–ª—è —á–∞—Ç–∞
   */
  async getApiKey(chatId: number): Promise<string | null> {
    const config = await this.getChatConfig(chatId)
    return config?.geminiApiKey || null
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —á–∞—Ç–∞
   */
  async getSystemPrompt(chatId: number): Promise<SystemPromptData | null> {
    const config = await this.getChatConfig(chatId)
    return config?.systemPrompt || null
  }

  // ==========================================================================
  // –ò–ó–ú–ï–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ß–ò–°–¢–ö–û–ô –ö–ï–®–ï–ô
  // ==========================================================================

  /**
   * –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ò–ò –≤ —á–∞—Ç–µ
   */
  async toggleAi(chatId: number, enabled: boolean): Promise<boolean> {
    const success = await this.chatRepository.toggleAi(chatId, enabled)

    if (success) {
      this.invalidateAllCaches(chatId)
      this.logger.i(`AI ${enabled ? "enabled" : "disabled"} for chat ${chatId}`)
    }

    return success
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á –¥–ª—è —á–∞—Ç–∞
   */
  async setApiKey(chatId: number, apiKey: string | null): Promise<boolean> {
    const success = await this.chatRepository.setApiKey(chatId, apiKey)

    if (success) {
      this.invalidateAllCaches(chatId)
      const maskedKey = apiKey ? `${apiKey.substring(0, 8)}...${apiKey.slice(-4)}` : "null"
      this.logger.i(`API key updated for chat ${chatId}: ${maskedKey}`)
    }

    return success
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —á–∞—Ç–∞
   */
  async setSystemPrompt(chatId: number, promptData: SystemPromptData | null): Promise<boolean> {
    const success = await this.chatRepository.setSystemPrompt(chatId, promptData)

    if (success) {
      this.invalidateAllCaches(chatId)
      this.logger.i(`System prompt updated for chat ${chatId}`)
    }

    return success
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
   */
  async updateSettings(
    chatId: number,
    updates: Partial<{
      aiEnabled: boolean
      geminiApiKey: string | null
      systemPrompt: SystemPromptData | null
    }>,
  ): Promise<boolean> {
    const success = await this.chatRepository.updateChatConfig(chatId, updates)

    if (success) {
      this.invalidateAllCaches(chatId)
      this.logger.i(`Settings updated for chat ${chatId}:`, Object.keys(updates))
    }

    return success
  }

  // ==========================================================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ï–®–ê–ú–ò
  // ==========================================================================

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–µ—à–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
   */
  private invalidateAllCaches(chatId: number): void {
    // –û—á–∏—â–∞–µ–º –∫–µ—à –≤ ChatRepository (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)
    // (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ updateChatConfig)

    // –û—á–∏—â–∞–µ–º –∫–µ—à –≤ AIChatService
    this.aiChatService?.clearChatCache(chatId)

    this.logger.d(`üîÑ All caches cleared for chat ${chatId}`)
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –¥–ª—è —á–∞—Ç–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  async clearChatCache(chatId: number): Promise<void> {
    this.invalidateAllCaches(chatId)
  }

  // ==========================================================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ==========================================================================

  /**
   * –°–æ–∑–¥–∞—Ç—å —á–∞—Ç –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
   */
  async ensureChatExists(chatId: number, title?: string, type: string = "group"): Promise<boolean> {
    try {
      const result = await this.chatRepository.getOrCreateChat(chatId, title, type)
      return result !== null
    } catch (error) {
      this.logger.e(`Error ensuring chat exists ${chatId}:`, error)
      return false
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
   */
  async isAdmin(chatId: number, userId: number): Promise<boolean> {
    return await this.chatRepository.isAdmin(chatId, userId)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  getStats(): object {
    return {
      service: "ChatSettingsService",
      status: "active",
    }
  }
}
