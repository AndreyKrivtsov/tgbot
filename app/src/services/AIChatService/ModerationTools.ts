import type { EventBus } from "../../core/EventBus.js"
import type { BanUserEvent, DeleteMessageEvent, MuteUserEvent } from "../../types/events.js"
import type { Logger } from "../../helpers/Logger.js"

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
 */
export interface ModerationResult {
  success: boolean
  message: string
  error?: string
}

/**
 * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Gemini API
 */
export class ModerationTools {
  constructor(
    private eventBus: EventBus,
    private logger: Logger,
  ) {}

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async deleteMessage(chatId: number, messageId: number, reason: string = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"): Promise<ModerationResult> {
    try {
      const event: DeleteMessageEvent = {
        chatId,
        messageId,
        reason,
      }

      this.eventBus.emit("moderation.delete", event)

      this.logger.i(`üóëÔ∏è Message ${messageId} deletion requested in chat ${chatId}. Reason: ${reason}`)

      return {
        success: true,
        message: `–°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} —É–¥–∞–ª–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
      }
    } catch (error) {
      this.logger.e("Error deleting message:", error)
      return {
        success: false,
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
        error: error instanceof Error ? error.message : "Unknown error",
      }
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (mute)
   */
  async muteUser(
    chatId: number,
    userId: number,
    duration: number = 3600,
    reason: string = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞",
  ): Promise<ModerationResult> {
    try {
      const event: MuteUserEvent = {
        chatId,
        userId,
        duration,
        reason,
      }

      this.eventBus.emit("moderation.mute", event)

      this.logger.i(`üîá User ${userId} mute requested in chat ${chatId} for ${duration}s. Reason: ${reason}`)

      return {
        success: true,
        message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ ${Math.floor(duration / 60)} –º–∏–Ω—É—Ç. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
      }
    } catch (error) {
      this.logger.e("Error muting user:", error)
      return {
        success: false,
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        error: error instanceof Error ? error.message : "Unknown error",
      }
    }
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (unmute)
   */
  async unmuteUser(chatId: number, userId: number, reason: string = "–°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"): Promise<ModerationResult> {
    try {
      // –î–ª—è —Ä–∞–∑–º—É—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—ã—Ç–∏–µ mute —Å duration = 0
      const event: MuteUserEvent = {
        chatId,
        userId,
        duration: 0, // 0 –æ–∑–Ω–∞—á–∞–µ—Ç —Å–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        reason,
      }

      this.eventBus.emit("moderation.mute", event)

      this.logger.i(`üîä User ${userId} unmute requested in chat ${chatId}. Reason: ${reason}`)

      return {
        success: true,
        message: `–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω—è—Ç—ã. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
      }
    } catch (error) {
      this.logger.e("Error unmuting user:", error)
      return {
        success: false,
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        error: error instanceof Error ? error.message : "Unknown error",
      }
    }
  }

  /**
   * –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ban)
   */
  async banUser(
    chatId: number,
    userId: number,
    duration?: number,
    reason: string = "–°–µ—Ä—å–µ–∑–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª",
  ): Promise<ModerationResult> {
    try {
      const event: BanUserEvent = {
        chatId,
        userId,
        duration,
        reason,
      }

      this.eventBus.emit("moderation.ban", event)

      const durationText = duration ? `–Ω–∞ ${Math.floor(duration / 3600)} —á–∞—Å–æ–≤` : "–Ω–∞–≤—Å–µ–≥–¥–∞"
      this.logger.i(`üö´ User ${userId} ban requested in chat ${chatId} ${durationText}. Reason: ${reason}`)

      return {
        success: true,
        message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ${durationText}. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
      }
    } catch (error) {
      this.logger.e("Error banning user:", error)
      return {
        success: false,
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        error: error instanceof Error ? error.message : "Unknown error",
      }
    }
  }

  /**
   * –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (unban)
   */
  async unbanUser(chatId: number, userId: number, reason: string = "–°–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"): Promise<ModerationResult> {
    try {
      // –î–ª—è —Ä–∞–∑–±–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—ã—Ç–∏–µ ban —Å duration = 0
      const event: BanUserEvent = {
        chatId,
        userId,
        duration: 0, // 0 –æ–∑–Ω–∞—á–∞–µ—Ç —Å–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        reason,
      }

      this.eventBus.emit("moderation.ban", event)

      this.logger.i(`üîì User ${userId} unban requested in chat ${chatId}. Reason: ${reason}`)

      return {
        success: true,
        message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
      }
    } catch (error) {
      this.logger.e("Error unbanning user:", error)
      return {
        success: false,
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        error: error instanceof Error ? error.message : "Unknown error",
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è Gemini API
   */
  getFunctionDeclarations() {
    return [
      {
        name: "delete_message",
        description: "–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Å–ø–∞–º–∞ –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª.",
        parameters: {
          type: "object",
          properties: {
            chat_id: {
              type: "integer",
              description: "ID —á–∞—Ç–∞, –≥–¥–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            },
            message_id: {
              type: "integer",
              description: "ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å",
            },
            reason: {
              type: "string",
              description: "–ü—Ä–∏—á–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—Å–ø–∞–º', '–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è', '—Ä–µ–∫–ª–∞–º–∞')",
            },
          },
          required: ["chat_id", "message_id"],
        },
      },
      {
        name: "mute_user",
        description: "–û—Ç–∫–ª—é—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞.",
        parameters: {
          type: "object",
          properties: {
            chat_id: {
              type: "integer",
              description: "ID —á–∞—Ç–∞, –≥–¥–µ –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            },
            user_id: {
              type: "integer",
              description: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å",
            },
            duration: {
              type: "integer",
              description: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3600 = 1 —á–∞—Å)",
            },
            reason: {
              type: "string",
              description: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            },
          },
          required: ["chat_id", "user_id"],
        },
      },
      {
        name: "unmute_user",
        description: "–°–Ω–∏–º–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
        parameters: {
          type: "object",
          properties: {
            chat_id: {
              type: "integer",
              description: "ID —á–∞—Ç–∞, –≥–¥–µ –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
            },
            user_id: {
              type: "integer",
              description: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
            },
            reason: {
              type: "string",
              description: "–ü—Ä–∏—á–∏–Ω–∞ —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
            },
          },
          required: ["chat_id", "user_id"],
        },
      },
      {
        name: "ban_user",
        description: "–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –ø—Ä–∞–≤–∏–ª. –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º.",
        parameters: {
          type: "object",
          properties: {
            chat_id: {
              type: "integer",
              description: "ID —á–∞—Ç–∞, –≥–¥–µ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            },
            user_id: {
              type: "integer",
              description: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
            },
            duration: {
              type: "integer",
              description: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)",
            },
            reason: {
              type: "string",
              description: "–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            },
          },
          required: ["chat_id", "user_id"],
        },
      },
      {
        name: "unban_user",
        description: "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ, —Å–Ω–∏–º–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.",
        parameters: {
          type: "object",
          properties: {
            chat_id: {
              type: "integer",
              description: "ID —á–∞—Ç–∞, –≥–¥–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            },
            user_id: {
              type: "integer",
              description: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
            },
            reason: {
              type: "string",
              description: "–ü—Ä–∏—á–∏–Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            },
          },
          required: ["chat_id", "user_id"],
        },
      },
    ]
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏
   */
  async executeFunction(functionName: string, args: any): Promise<ModerationResult> {
    switch (functionName) {
      case "delete_message":
        return this.deleteMessage(args.chat_id, args.message_id, args.reason)

      case "mute_user":
        return this.muteUser(args.chat_id, args.user_id, args.duration, args.reason)

      case "unmute_user":
        return this.unmuteUser(args.chat_id, args.user_id, args.reason)

      case "ban_user":
        return this.banUser(args.chat_id, args.user_id, args.duration, args.reason)

      case "unban_user":
        return this.unbanUser(args.chat_id, args.user_id, args.reason)

      default:
        return {
          success: false,
          message: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: ${functionName}`,
          error: "Unknown function",
        }
    }
  }
}
