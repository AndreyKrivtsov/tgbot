import type { Chat, ChatConfig, SystemPromptData } from "../../db/schema.js"
import type { ChatRepository } from "../../repository/ChatRepository.js"
import type { Logger } from "../../helpers/Logger.js"
import { AI_CHAT_CONFIG } from "../../constants.js"

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
 */
export interface ChatSettingsResult {
  chat: Chat | null
  config: ChatConfig | null
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞
 */
export interface ApiKeyResult {
  key: string
  isReal: boolean
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
 */
export interface ChatSettingsUpdates {
  geminiApiKey?: string | null
  systemPrompt?: SystemPromptData | null
  aiEnabled?: boolean
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è ChatConfigService
 */
export interface IChatConfigService {
  getChatSettings: (chatId: number) => Promise<ChatSettingsResult>
  getApiKeyForChat: (chatId: number) => Promise<ApiKeyResult | null>
  getSystemPromptForChat: (chatId: number) => Promise<string>
  isAiEnabledForChat: (chatId: number) => Promise<boolean>
  isChatAdmin: (chatId: number, userId: number) => Promise<boolean>
  updateChatSettings: (chatId: number, userId: number, updates: ChatSettingsUpdates) => Promise<boolean>
  clearChatCache: (chatId: number) => void
  loadAllChatSettings: () => Promise<void>
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–∞—Ç–æ–≤
 */
export class ChatConfigService implements IChatConfigService {
  private chatSettings: Map<number, ChatSettingsResult> = new Map()
  private logger: Logger
  private chatRepository?: ChatRepository

  constructor(
    logger: Logger,
    chatRepository?: ChatRepository,
  ) {
    this.logger = logger
    this.chatRepository = chatRepository
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
   */
  async getChatSettings(chatId: number): Promise<ChatSettingsResult> {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.chatSettings.has(chatId)) {
      const cached = this.chatSettings.get(chatId)!
      return { chat: cached.chat, config: cached.config }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
    if (this.chatRepository) {
      const result = await this.chatRepository.getChatWithConfig(chatId)

      if (result.chat) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º config –∏–∑ chat.config –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
        const config = result.config || (result.chat as any).config || null
        const normalizedResult = {
          chat: result.chat,
          config,
        }

        // –ö–µ—à–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.chatSettings.set(chatId, normalizedResult)
        return normalizedResult
      }
    }

    return { chat: null, config: null }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –¥–ª—è —á–∞—Ç–∞ (–∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å null –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
   */
  async getApiKeyForChat(chatId: number): Promise<ApiKeyResult | null> {
    const { chat, config } = await this.getChatSettings(chatId)

    this.logger.d(`[ChatConfigService] getApiKeyForChat: chatId=${chatId}, hasGeminiKey=${!!config?.geminiApiKey}`)

    // –ï—Å–ª–∏ —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π ‚Äî –±–æ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
    if (chat?.type === "private") {
      this.logger.w(`ChatConfigService: –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ ${chatId} ‚Äî –∑–∞–ø—Ä–µ—â–µ–Ω–æ.`)
      return null
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π API –∫–ª—é—á –≤ –∫–æ–Ω—Ñ–∏–≥–µ —á–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (config?.geminiApiKey) {
      const maskedKey = `${config.geminiApiKey.substring(0, 8)}...${config.geminiApiKey.slice(-4)}`
      this.logger.d(`[ChatConfigService] –ù–∞–π–¥–µ–Ω –∫–ª—é—á –¥–ª—è —á–∞—Ç–∞ ${chatId}: ${maskedKey}`)
      return {
        key: config.geminiApiKey,
        isReal: true,
      }
    }

    this.logger.d(`[ChatConfigService] –ö–ª—é—á –¥–ª—è —á–∞—Ç–∞ ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`)
    // API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    return null
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —á–∞—Ç–∞
   */
  async getSystemPromptForChat(chatId: number): Promise<string> {
    const { config } = await this.getChatSettings(chatId)

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (config?.systemPrompt) {
      return this.chatRepository?.buildSystemPromptString(config.systemPrompt) || AI_CHAT_CONFIG.DEFAULT_SYSTEM_PROMPT
    }

    // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    return AI_CHAT_CONFIG.DEFAULT_SYSTEM_PROMPT
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∫–ª—é—á–µ–Ω –ª–∏ –ò–ò –≤ —á–∞—Ç–µ
   */
  async isAiEnabledForChat(chatId: number): Promise<boolean> {
    const { config } = await this.getChatSettings(chatId)
    return config?.aiEnabled ?? true
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
   */
  async isChatAdmin(chatId: number, userId: number): Promise<boolean> {
    if (!this.chatRepository)
      return false
    return await this.chatRepository.isAdmin(chatId, userId)
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
   */
  async updateChatSettings(
    chatId: number,
    userId: number,
    updates: ChatSettingsUpdates,
  ): Promise<boolean> {
    if (!this.chatRepository)
      return false

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const isAdmin = await this.isChatAdmin(chatId, userId)
    if (!isAdmin) {
      this.logger.w(`User ${userId} tried to update settings for chat ${chatId} without admin rights`)
      return false
    }

    const success = await this.chatRepository.updateChatConfig(chatId, updates)
    if (success) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      this.chatSettings.delete(chatId)
      this.logger.i(`Chat ${chatId} settings updated by user ${userId}`)
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
      await this.getChatSettings(chatId)
    }

    return success
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
   */
  clearChatCache(chatId: number): void {
    this.logger.d(`üîÑ Cache cleared for chat ${chatId}`)
    this.chatSettings.delete(chatId)
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤ –∏–∑ –ë–î
   */
  async loadAllChatSettings(): Promise<void> {
    if (!this.chatRepository) {
      this.logger.w("ChatRepository not available, skipping chat settings loading")
      return
    }

    try {
      // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º, —Ç–∞–∫ –∫–∞–∫ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
      this.logger.i("Chat settings service initialized")
    } catch (error) {
      this.logger.e("Error loading chat settings:", error)
    }
  }
}
