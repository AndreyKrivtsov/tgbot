import type { Logger } from "../../helpers/Logger.js"
import type { AppConfig } from "../../config.js"
import type { DatabaseService } from "../DatabaseService/index.js"
import type { RedisService } from "../RedisService/index.js"
import type { EventBus } from "../../core/EventBus.js"
import { CacheService } from "../CacheService/index.js"
import { ModerationTools } from "./ModerationTools.js"
import { ChatRepository } from "../../repository/ChatRepository.js"
import { ChatConfigService } from "./ChatConfigService.js"
import { MessageProcessor } from "./MessageProcessor.js"
import { AIResponseService } from "./AIResponseService.js"
import { TypingManager } from "./TypingManager.js"
import { ChatContextManager } from "./ChatContextManager.js"
import type { ChatContext } from "./ChatContextManager.js"
import { ChatQueueManager } from "./ChatQueueManager.js"
import { AdaptiveChatThrottleManager } from "./AdaptiveThrottleManager.js"
import type { MessageQueueItem } from "./MessageQueue.js"
import type { IAIProvider } from "./providers/IAIProvider.js"
import type { IAIResponseService, IChatConfigService, IMessageProcessor, IService, ITypingManager, ProcessMessageResult } from "./interfaces.js"

import { AI_CHAT_CONFIG } from "../../constants.js"

interface AIChatDependencies {
  database?: DatabaseService
  redis?: RedisService
  eventBus?: EventBus
}

/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è RedisService –∫ CacheService –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
 */
class RedisAsCacheService extends CacheService {
  constructor(private redis: RedisService, config: any, logger: any) {
    super(config, logger)
  }

  async initialize(): Promise<void> {
    // Redis —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
  }

  async start(): Promise<void> {
    // Redis —É–∂–µ –∑–∞–ø—É—â–µ–Ω
  }

  async stop(): Promise<void> {
    // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Redis, –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
  }

  async dispose(): Promise<void> {
    // –ù–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º Redis, –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
  }

  isHealthy(): boolean {
    return this.redis.isHealthy()
  }

  set(key: string, value: any, ttl?: number): void {
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è
    this.redis.set(key, JSON.stringify(value), ttl)
  }

  get(_key: string): any {
    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π get –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Redis, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ getAsync
    return null
  }

  delete(key: string): boolean {
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º
    this.redis.del(key)
    return true
  }

  clear(): void {
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—á–∏—â–∞–µ–º
    this.redis.keys("*").then((keys) => {
      if (keys.length > 0) {
        keys.forEach(key => this.redis.del(key))
      }
    })
  }

  getStats(): object {
    return {
      size: 0, // –ù–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      isConnected: this.redis.isHealthy(),
      status: this.redis.isHealthy() ? "active" : "inactive",
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  async getAsync(key: string): Promise<any> {
    const value = await this.redis.get(key)
    return value ? JSON.parse(value) : null
  }

  async setAsync(key: string, value: any, ttl?: number): Promise<void> {
    await this.redis.set(key, JSON.stringify(value), ttl)
  }

  async deleteAsync(key: string): Promise<boolean> {
    return await this.redis.del(key)
  }

  async hasAsync(key: string): Promise<boolean> {
    return await this.redis.exists(key)
  }

  async sizeAsync(): Promise<number> {
    const keys = await this.redis.keys("*")
    return keys.length
  }

  async clearAsync(): Promise<void> {
    const keys = await this.redis.keys("*")
    if (keys.length > 0) {
      await Promise.all(keys.map(key => this.redis.del(key)))
    }
  }
}

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π ChatQueueManager —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 */
class ExtendedChatQueueManager extends ChatQueueManager {
  getStats(): object {
    return {
      totalQueues: this.hasQueue.length,
      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
  }
}

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π ChatContextManager —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 */
class ExtendedChatContextManager extends ChatContextManager {
  getStats(): object {
    return {
      activeContexts: Object.keys(this.getContext).length,
      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
  }

  createContext(chatId: string): ChatContext {
    const context: ChatContext = {
      chatId,
      messages: [],
      lastActivity: Date.now(),
      requestCount: 0,
    }
    this.setContext(chatId, context)
    return context
  }
}

/**
 * –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å AI —á–∞—Ç-–±–æ—Ç–∞
 * –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä, –¥–µ–ª–µ–≥–∏—Ä—É—è –∑–∞–¥–∞—á–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
 */
export class AIChatServiceRefactored implements IService {
  private config: AppConfig
  private logger: Logger
  private dependencies: AIChatDependencies

  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  private chatConfigService: IChatConfigService
  private messageProcessor: IMessageProcessor
  private aiResponseService: IAIResponseService
  private typingManager: ITypingManager
  private contextManager: ExtendedChatContextManager
  private queueManager: ExtendedChatQueueManager
  private throttleManager: AdaptiveChatThrottleManager
  private moderationTools?: ModerationTools

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  private queueProcessors: Set<string> = new Set()
  private isProcessingQueue = false
  private nextMessageId = 1
  private contextSaveTimer?: NodeJS.Timeout

  // –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å TelegramBotService
  public onMessageResponse?: (contextId: string, response: string, messageId: number, userMessageId?: number, isError?: boolean) => void
  public onTypingStart?: (contextId: string) => void
  public onTypingStop?: (contextId: string) => void

  constructor(
    config: AppConfig,
    logger: Logger,
    dependencies: AIChatDependencies = {},
    aiProvider: IAIProvider,
    throttleManager?: AdaptiveChatThrottleManager,
  ) {
    this.config = config
    this.logger = logger
    this.dependencies = dependencies

    // –°–æ–∑–¥–∞–µ–º ChatRepository –µ—Å–ª–∏ –µ—Å—Ç—å database
    const chatRepository = dependencies.database
      ? new ChatRepository(dependencies.database)
      : undefined

    // –°–æ–∑–¥–∞–µ–º CacheService wrapper –¥–ª—è Redis
    const cacheService = dependencies.redis
      ? new RedisAsCacheService(dependencies.redis, config, logger)
      : undefined

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    this.chatConfigService = new ChatConfigService(logger, chatRepository)
    this.messageProcessor = new MessageProcessor(logger)
    this.aiResponseService = new AIResponseService(logger, aiProvider)
    this.contextManager = new ExtendedChatContextManager(cacheService)
    this.queueManager = new ExtendedChatQueueManager()
    this.throttleManager = throttleManager || new AdaptiveChatThrottleManager(logger)

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TypingManager —Å –∫–æ–ª–±—ç–∫–∞–º–∏
    this.typingManager = new TypingManager(logger, {
      onStart: (contextId: string) => {
        this.onTypingStart?.(contextId)
      },
      onStop: (contextId: string) => {
        this.onTypingStop?.(contextId)
      },
    })

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ModerationTools –µ—Å–ª–∏ –µ—Å—Ç—å EventBus
    if (dependencies.eventBus) {
      this.moderationTools = new ModerationTools(dependencies.eventBus, logger)
    }
  }

  name: string = "AIChatServiceRefactored"

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async initialize(): Promise<void> {
    this.logger.i("ü§ñ Initializing AI chat service (refactored)...")

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤
    await this.chatConfigService.loadAllChatSettings()

    this.logger.i("‚úÖ AI chat service initialized")
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
   */
  async start(): Promise<void> {
    this.logger.i("üöÄ Starting AI chat service (refactored)...")

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
    this.startContextAutoSave()

    this.logger.i("‚úÖ AI chat service started")
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
   */
  async stop(): Promise<void> {
    this.logger.i("üõë Stopping AI chat service (refactored)...")

    this.isProcessingQueue = false

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if (this.contextSaveTimer) {
      clearInterval(this.contextSaveTimer)
      this.contextSaveTimer = undefined
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
    await this.contextManager.saveAllToCache()

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    this.typingManager.stopAllTyping()

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏
    this.queueManager.clearAll()
    this.queueProcessors.clear()

    this.logger.i("‚úÖ AI chat service stopped")
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async dispose(): Promise<void> {
    this.logger.i("üóëÔ∏è Disposing AI chat service (refactored)...")

    await this.stop()
    this.throttleManager.dispose()
    this.typingManager.dispose()
    this.contextManager.clearAll()

    this.logger.i("‚úÖ AI chat service disposed")
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  isHealthy(): boolean {
    return this.dependencies.redis !== undefined
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async processMessage(
    userId: number,
    chatId: number,
    message: string,
    username?: string,
    firstName?: string,
    userMessageId?: number,
  ): Promise<ProcessMessageResult> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ AI –≤ —á–∞—Ç–µ
    const isAiEnabled = await this.chatConfigService.isAiEnabledForChat(chatId)
    if (!isAiEnabled) {
      return {
        success: false,
        queued: false,
        reason: "AI –æ—Ç–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ",
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    const apiKeyResult = await this.chatConfigService.getApiKeyForChat(chatId)
    if (!apiKeyResult) {
      return {
        success: false,
        queued: false,
        reason: "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω",
      }
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const validation = this.messageProcessor.validateMessage(message)
    if (!validation.isValid) {
      return {
        success: false,
        queued: false,
        reason: validation.reason,
      }
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const contextualMessage = this.messageProcessor.prepareContextualMessage(
      message,
      username,
      firstName,
    )

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    const contextId = `${chatId}`
    const messageId = this.nextMessageId++

    const queueItem: MessageQueueItem = {
      id: messageId,
      message: contextualMessage.content,
      contextId,
      timestamp: Date.now(),
      retryCount: 0,
      userMessageId,
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
    const queueLength = this.queueManager.getQueueLength(contextId)
    if (queueLength >= AI_CHAT_CONFIG.MAX_QUEUE_SIZE) {
      return {
        success: false,
        queued: false,
        reason: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏",
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    this.queueManager.enqueue(contextId, queueItem)

    // –ó–∞–ø—É—Å–∫–∞–µ–º typing –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    this.typingManager.startTyping(contextId)

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    if (!this.queueProcessors.has(contextId)) {
      this.startQueueProcessor(contextId)
    }

    return {
      success: true,
      queued: true,
      queuePosition: queueLength + 1,
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
   */
  private startQueueProcessor(contextId: string): void {
    this.queueProcessors.add(contextId)
    this.logger.d(`Starting queue processor for context ${contextId}`)

    const processNext = async () => {
      const queueItem = this.queueManager.dequeue(contextId)
      if (!queueItem) {
        this.queueProcessors.delete(contextId)
        return
      }

      await this.processQueuedMessage(queueItem)

      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (this.queueManager.getQueueLength(contextId) > 0) {
        setTimeout(processNext, 100)
      } else {
        this.queueProcessors.delete(contextId)
      }
    }

    processNext()
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
   */
  private async processQueuedMessage(queueItem: MessageQueueItem): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const context = await this.getOrCreateContext(queueItem.contextId)

      // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      const chatId = Number(queueItem.contextId)
      const systemPrompt = await this.chatConfigService.getSystemPromptForChat(chatId)

      // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
      const apiKeyResult = await this.chatConfigService.getApiKeyForChat(chatId)
      if (!apiKeyResult) {
        throw new Error("API key not found")
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      context.messages.push({
        role: "user",
        content: queueItem.message,
        timestamp: Date.now(),
      })

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const responseResult = await this.aiResponseService.generateResponse({
        message: queueItem.message,
        context,
        systemPrompt,
        apiKey: apiKeyResult.key,
        tools: this.getModerationFunctionDeclarations(),
      })

      if (!responseResult.success) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
        const errorMessage = `–û—à–∏–±–∫–∞ AI: ${responseResult.error || "Unknown error"}`
        this.onMessageResponse?.(
          queueItem.contextId,
          errorMessage,
          queueItem.id,
          queueItem.userMessageId,
          true,
        )
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      if (responseResult.functionCall) {
        const functionResult = await this.executeModerationFunction(
          responseResult.functionCall.name,
          responseResult.functionCall.args,
        )

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        const resultMessage = functionResult.success
          ? `‚úÖ ${functionResult.message}`
          : `‚ùå ${functionResult.message}`

        this.onMessageResponse?.(
          queueItem.contextId,
          resultMessage,
          queueItem.id,
          queueItem.userMessageId,
          !functionResult.success,
        )
        return
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      context.messages.push({
        role: "model",
        content: responseResult.response!,
        timestamp: Date.now(),
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      context.lastActivity = Date.now()
      context.requestCount++

      // –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
      if (context.messages.length > AI_CHAT_CONFIG.MAX_CONTEXT_MESSAGES) {
        context.messages = context.messages.slice(-AI_CHAT_CONFIG.MAX_CONTEXT_MESSAGES)
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      this.contextManager.setContext(queueItem.contextId, context)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      this.onMessageResponse?.(
        queueItem.contextId,
        responseResult.response!,
        queueItem.id,
        queueItem.userMessageId,
        false,
      )
    } catch (error) {
      this.logger.e("Error processing queued message:", error)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
      const errorMessage = `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error instanceof Error ? error.message : "Unknown error"}`
      this.onMessageResponse?.(
        queueItem.contextId,
        errorMessage,
        queueItem.id,
        queueItem.userMessageId,
        true,
      )
    } finally {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º typing –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
      this.typingManager.stopTyping(queueItem.contextId)
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private async getOrCreateContext(contextId: string): Promise<ChatContext> {
    let context = this.contextManager.getContext(contextId)

    if (!context) {
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–µ—à–∞
      const cachedContext = await this.contextManager.loadFromCache(contextId)
      if (cachedContext) {
        context = cachedContext
        this.contextManager.setContext(contextId, context)
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = this.contextManager.createContext(contextId)
      }
    }

    return context
  }

  /**
   * –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
   */
  private startContextAutoSave(): void {
    this.contextSaveTimer = setInterval(async () => {
      try {
        await this.contextManager.saveAllToCache()
        this.logger.d("Auto-saved all contexts to cache")
      } catch (error) {
        this.logger.e("Error auto-saving contexts:", error)
      }
    }, AI_CHAT_CONFIG.CONTEXT_SAVE_INTERVAL_MS)
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—Ç–∞—Ä—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
  isBotMention(message: string, botUsername?: string, replyToBotMessage?: boolean): boolean {
    return this.messageProcessor.isBotMention(message, botUsername, replyToBotMessage)
  }

  cleanBotMention(message: string, botUsername?: string): string {
    return this.messageProcessor.cleanBotMention(message, botUsername)
  }

  async getChatSettings(chatId: number) {
    return await this.chatConfigService.getChatSettings(chatId)
  }

  async updateChatSettings(chatId: number, userId: number, updates: any) {
    return await this.chatConfigService.updateChatSettings(chatId, userId, updates)
  }

  async isAiEnabledForChat(chatId: number): Promise<boolean> {
    return await this.chatConfigService.isAiEnabledForChat(chatId)
  }

  async isChatAdmin(chatId: number, userId: number): Promise<boolean> {
    return await this.chatConfigService.isChatAdmin(chatId, userId)
  }

  clearChatCache(chatId: number): void {
    this.chatConfigService.clearChatCache(chatId)
  }

  getContextStats(contextId: string) {
    const context = this.contextManager.getContext(contextId)
    if (!context)
      return null

    return {
      messages: context.messages.length,
      requestCount: context.requestCount,
    }
  }

  getThrottleStats(_contextId: string) {
    return this.throttleManager.getStats()
  }

  getStats(): object {
    return {
      service: "AIChatServiceRefactored",
      queues: this.queueManager.getStats(),
      contexts: this.contextManager.getStats(),
      throttle: this.throttleManager.getStats(),
      typing: this.typingManager.getStats(),
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Gemini API
   */
  getModerationFunctionDeclarations() {
    if (!this.moderationTools) {
      return []
    }
    return this.moderationTools.getFunctionDeclarations()
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
   */
  async executeModerationFunction(functionName: string, args: any) {
    if (!this.moderationTools) {
      return {
        success: false,
        message: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã",
        error: "ModerationTools not initialized",
      }
    }
    return await this.moderationTools.executeFunction(functionName, args)
  }
}
