import type { IService } from "../../core/Container.js"
import type { Logger } from "../../helpers/Logger.js"
import type { AppConfig } from "../../config.js"
import type { GeminiMessage } from "./providers/GeminiAdapter.js"
import { GeminiAdapter } from "./providers/GeminiAdapter.js"
import { ChatRepository } from "../../repository/ChatRepository.js"
import type { Chat, ChatConfig, SystemPromptData } from "../../db/schema.js"
import type { DatabaseService } from "../DatabaseService/index.js"
import type { RedisService } from "../RedisService/index.js"
import { AI_CHAT_CONFIG } from "../../constants.js"
import { getMessage } from "../TelegramBot/utils/Messages.js"
import { AdaptiveChatThrottleManager } from "./AdaptiveThrottleManager.js"

interface AIChatDependencies {
  database?: DatabaseService
  redis?: RedisService
}

interface ChatContext {
  chatId: string
  messages: ChatMessage[]
  lastActivity: number
  requestCount: number
}

interface ChatMessage {
  role: "user" | "assistant"
  content: string
  timestamp: number
}

interface MessageQueue {
  id: number
  message: string
  contextId: string
  timestamp: number
  retryCount: number
  userMessageId?: number
}

/**
 * –°–µ—Ä–≤–∏—Å AI —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ Gemini
 */
export class AIChatService implements IService {
  private config: AppConfig
  private logger: Logger
  private dependencies: AIChatDependencies
  private chatContexts: Map<string, ChatContext> = new Map()
  private messageQueue: MessageQueue[] = []
  private isProcessingQueue = false
  private nextMessageId = 1
  private chatRepository?: ChatRepository
  private redisService?: RedisService
  private chatSettings: Map<number, { chat: Chat | null, config: ChatConfig | null }> = new Map() // –ö—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–æ–≤
  private activeTypingChats: Set<string> = new Set() // –ß–∞—Ç—ã –≥–¥–µ –∞–∫—Ç–∏–≤–µ–Ω typing
  private throttleManager: AdaptiveChatThrottleManager // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π throttling –º–µ–Ω–µ–¥–∂–µ—Ä
  private contextSaveTimer?: NodeJS.Timeout // –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤

  constructor(config: AppConfig, logger: Logger, dependencies: AIChatDependencies = {}) {
    this.config = config
    this.logger = logger
    this.dependencies = dependencies
    this.throttleManager = new AdaptiveChatThrottleManager(logger)

    if (dependencies.database) {
      this.chatRepository = new ChatRepository(dependencies.database)
    }

    if (dependencies.redis) {
      this.redisService = dependencies.redis
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ AI —á–∞—Ç–∞
   */
  async initialize(): Promise<void> {
    this.logger.i("ü§ñ Initializing AI chat service...")

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤ –∏–∑ –ë–î
    await this.loadChatSettings()

    this.logger.i("‚úÖ AI chat service initialized")
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ AI —á–∞—Ç–∞
   */
  async start(): Promise<void> {
    this.logger.i("üöÄ Starting AI chat service...")

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
    this.startQueueProcessor()

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
    this.startContextAutoSave()

    this.logger.i("‚úÖ AI chat service started")
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ AI —á–∞—Ç–∞
   */
  async stop(): Promise<void> {
    this.logger.i("üõë Stopping AI chat service...")
    this.isProcessingQueue = false

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if (this.contextSaveTimer) {
      clearInterval(this.contextSaveTimer)
      this.contextSaveTimer = undefined
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –≤ –∫—ç—à
    await this.saveAllContextsToCache()

    this.logger.i("‚úÖ AI chat service stopped")
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async dispose(): Promise<void> {
    this.logger.i("üóëÔ∏è Disposing AI chat service...")
    await this.stop()
    this.throttleManager.dispose()
    this.chatContexts.clear()
    this.messageQueue = []
    this.logger.i("‚úÖ AI chat service disposed")
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  isHealthy(): boolean {
    return this.dependencies.redis !== undefined
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –±–æ—Ç—É
   */
  isBotMention(message: string, botUsername?: string, replyToBotMessage?: boolean): boolean {
    if (!message || message.trim().length === 0) {
      return false
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, —Ç–æ —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É
    if (replyToBotMessage) {
      return true
    }

    const text = message.toLowerCase().trim()

    // –ü—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ @username
    if (botUsername && text.includes(`@${botUsername.toLowerCase()}`)) {
      return true
    }

    // –û–±—Ä–∞—â–µ–Ω–∏–µ "—ç–π –±–æ—Ç", "–∞–ª—å—Ç—Ä–æ–Ω" –∏ —Ç.–¥.
    const botTriggers = [
      /^—ç–π.{0,3}–±–æ—Ç\W?/i,
      /^–∞–ª—å—Ç—Ä–æ–Ω/gi,
      /^–±–æ—Ç[,\s]/i,
    ]

    for (const trigger of botTriggers) {
      if (trigger.test(text)) {
        return true
      }
    }

    return false
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞
   */
  cleanBotMention(message: string, botUsername?: string): string {
    let cleaned = message.trim()

    // –£–±–∏—Ä–∞–µ–º @username
    if (botUsername) {
      cleaned = cleaned.replace(new RegExp(`@${botUsername}`, "gi"), "").trim()
    }

    // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
    cleaned = cleaned.replace(/^—ç–π.{0,3}–±–æ—Ç\W?/i, "").trim()
    cleaned = cleaned.replace(/^–∞–ª—å—Ç—Ä–æ–Ω\W?/gi, "").trim()
    cleaned = cleaned.replace(/^–±–æ—Ç[,\s]/i, "").trim()

    return cleaned || message
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è AI
   */
  async processMessage(
    userId: number,
    chatId: number,
    message: string,
    username?: string,
    firstName?: string,
    userMessageId?: number,
  ): Promise<{
      success: boolean
      queued: boolean
      reason?: string
      queuePosition?: number
    }> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
      if (this.messageQueue.length >= AI_CHAT_CONFIG.MAX_QUEUE_SIZE) {
        return {
          success: false,
          queued: false,
          reason: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        }
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è AI
      const cleanedMessage = this.cleanBotMention(message)
      const contextualMessage = this.prepareContextualMessage(
        cleanedMessage,
        username,
        firstName,
      )

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
      const queueItem: MessageQueue = {
        id: this.nextMessageId++,
        message: contextualMessage,
        contextId: chatId.toString(),
        timestamp: Date.now(),
        retryCount: 0,
        userMessageId,
      }

      this.messageQueue.push(queueItem)

      // –í–∫–ª—é—á–∞–µ–º typing –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω
      if (!this.activeTypingChats.has(queueItem.contextId)) {
        this.activeTypingChats.add(queueItem.contextId)
      }

      this.logger.d(`Added message to queue from ${firstName} (${userId})`)

      return {
        success: true,
        queued: true,
        queuePosition: this.messageQueue.length,
      }
    } catch (error) {
      this.logger.e("Error processing message:", error)
      return {
        success: false,
        queued: false,
        reason: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
      }
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private prepareContextualMessage(
    message: string,
    username?: string,
    firstName?: string,
  ): string {
    const date = new Date()
    const messageDate = date.toISOString().replace(/:\d+\.\d+Z/gi, "").replace("T", " ")

    const userInfo = firstName
      ? (username ? `@${username}][${firstName}` : `${firstName}`)
      : (username ? `@${username}` : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

    return `[${messageDate}][${userInfo}] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–±—è: ${message}`
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞
   */
  private async getOrCreateContext(contextId: string): Promise<ChatContext> {
    let context = this.chatContexts.get(contextId)

    if (!context) {
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
      const cachedContext = await this.loadContextFromCache(contextId)

      if (cachedContext) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –∫—ç—à–∞
        context = cachedContext
        this.chatContexts.set(contextId, context)
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        const now = Date.now()
        context = {
          chatId: contextId,
          messages: [],
          lastActivity: now,
          requestCount: 0,
        }
        this.chatContexts.set(contextId, context)
      }
    }

    context.lastActivity = Date.now()
    return context
  }

  /**
   * –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private startQueueProcessor(): void {
    if (this.isProcessingQueue)
      return

    this.isProcessingQueue = true

    const processNext = async () => {
      if (!this.isProcessingQueue)
        return

      try {
        const queueItem = this.messageQueue.shift()

        if (queueItem) {
          await this.processQueuedMessage(queueItem)
        }
      } catch (error) {
        this.logger.e("Queue processing error:", error)
      }

      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      setTimeout(processNext, AI_CHAT_CONFIG.QUEUE_PROCESS_INTERVAL_MS)
    }

    processNext()
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
   */
  private startContextAutoSave(): void {
    if (!this.redisService) {
      this.logger.d("No Redis connection, skipping context auto-save")
      return
    }

    this.contextSaveTimer = setInterval(async () => {
      try {
        await this.saveAllContextsToCache()
      } catch (error) {
        this.logger.e("Error in context auto-save:", error)
      }
    }, AI_CHAT_CONFIG.CONTEXT_SAVE_INTERVAL_MS)

    this.logger.d("Context auto-save started")
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
   */
  private async processQueuedMessage(queueItem: MessageQueue): Promise<void> {
    try {
      const context = await this.getOrCreateContext(queueItem.contextId)

      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI —Å throttling, –ø–µ—Ä–µ–¥–∞–µ–º retryCount –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      await this.throttledAIRequest(queueItem, queueItem.retryCount)
      this.onTypingStart?.(queueItem.contextId)

      context.requestCount++
    } catch (error) {
      this.logger.e("Error processing queued message:", error)

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–∞ –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
      if (
        error instanceof Error
        && (error.message.includes("No API key available for this chat") || error.message.includes("–ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"))
      ) {
        const noKeyMessage
          = "‚ùóÔ∏è –î–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API-–∫–ª—é—á."
        this.onMessageResponse?.(queueItem.contextId, noKeyMessage, queueItem.id, queueItem.userMessageId, true)

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        this.messageQueue = this.messageQueue.filter(item => item.contextId !== queueItem.contextId)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
        const hasMoreMessages = this.messageQueue.some(item => item.contextId === queueItem.contextId)
        if (!hasMoreMessages && this.activeTypingChats.has(queueItem.contextId)) {
          // –ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ - –≤—ã–∫–ª—é—á–∞–µ–º typing
          this.activeTypingChats.delete(queueItem.contextId)
          this.onTypingStop?.(queueItem.contextId)
        }
        return
      }

      // Retry logic
      if (queueItem.retryCount < 2) {
        queueItem.retryCount++
        this.messageQueue.push(queueItem)
        this.logger.w(`Retrying message ${queueItem.id}, attempt ${queueItem.retryCount} (context will be reduced)`)
      } else {
        // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const errorMessage = getMessage("ai_service_error")
        this.onMessageResponse?.(queueItem.contextId, errorMessage, queueItem.id, queueItem.userMessageId, true)

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        this.messageQueue = this.messageQueue.filter(item => item.contextId !== queueItem.contextId)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
        const hasMoreMessages = this.messageQueue.some(item => item.contextId === queueItem.contextId)
        if (!hasMoreMessages && this.activeTypingChats.has(queueItem.contextId)) {
          // –ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ - –≤—ã–∫–ª—é—á–∞–µ–º typing
          this.activeTypingChats.delete(queueItem.contextId)
          this.onTypingStop?.(queueItem.contextId)
        }
      }
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AI –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
   */
  private async throttledAIRequest(queueItem: MessageQueue, retryCount: number = 0): Promise<void> {
    try {
      // 1. –ñ–¥–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç token bucket (–ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º)
      await this.throttleManager.waitForRequestPermission(queueItem.contextId)

      const chatId = Number.parseInt(queueItem.contextId)

      // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –¥–ª—è —á–∞—Ç–∞
      const apiKeyResult = await this.getApiKeyForChat(chatId)
      if (!apiKeyResult) {
        throw new Error("No API key available for this chat")
      }

      this.onTypingStart?.(queueItem.contextId)

      // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —á–∞—Ç–∞
      const systemPrompt = await this.getSystemPromptForChat(chatId)

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
      const context = await this.getOrCreateContext(queueItem.contextId)

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      context.messages.push({
        role: "user",
        content: queueItem.message,
        timestamp: Date.now(),
      })

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è Gemini —Å —É—á–µ—Ç–æ–º retry
      const conversationHistory = this.prepareConversationHistory(context, retryCount)

      // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä –∏ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API
      const geminiAdapter = new GeminiAdapter()
      const response = await geminiAdapter.generateContent(
        apiKeyResult.key,
        queueItem.message,
        conversationHistory,
        systemPrompt,
      )

      if (response && response.trim()) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.messages.push({
          role: "assistant",
          content: response,
          timestamp: Date.now(),
        })

        // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–µ–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (context.messages.length > AI_CHAT_CONFIG.MAX_CONTEXT_MESSAGES) {
          context.messages = context.messages.slice(-AI_CHAT_CONFIG.MAX_CONTEXT_MESSAGES)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.lastActivity = Date.now()

        // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        await this.throttleManager.applyPostResponseDelay(queueItem.contextId, response.length)

        // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        this.onMessageResponse?.(queueItem.contextId, response, queueItem.id, queueItem.userMessageId, false)
      } else {
        this.logger.w(`Empty AI response for message ${queueItem.id}`)
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
      const hasMoreMessages = this.messageQueue.some(item => item.contextId === queueItem.contextId)
      if (!hasMoreMessages && this.activeTypingChats.has(queueItem.contextId)) {
        // –ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ - –≤—ã–∫–ª—é—á–∞–µ–º typing
        this.activeTypingChats.delete(queueItem.contextId)
        this.onTypingStop?.(queueItem.contextId)
      }
    } catch (error) {
      this.logger.e("AI request error:", error)
      throw error
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å —É–º–µ–Ω—å—à–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ retry
   */
  private prepareConversationHistory(context: ChatContext, retryCount: number): GeminiMessage[] {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (—Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    const allMessages = context.messages.slice(0, -1)

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (retryCount === 0) {
      this.logger.d(`Chat ${context.chatId}: Using full context (${allMessages.length} messages)`)
      return allMessages.map(msg => ({
        role: msg.role === "assistant" ? "model" : "user",
        parts: [{ text: msg.content }],
      }))
    }

    // –î–ª—è retry –ø–æ–ø—ã—Ç–æ–∫ —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ 2^retryCount —Ä–∞–∑
    const reductionFactor = 2 ** retryCount
    const reducedLength = Math.max(1, Math.floor(allMessages.length / reductionFactor))

    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ)
    const reducedMessages = allMessages.slice(-reducedLength)

    this.logger.i(`Chat ${context.chatId}: Retry attempt ${retryCount}, reducing context from ${allMessages.length} to ${reducedMessages.length} messages (reduction factor: ${reductionFactor})`)

    return reducedMessages.map(msg => ({
      role: msg.role === "assistant" ? "model" : "user",
      parts: [{ text: msg.content }],
    }))
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–æ–≤ –∏–∑ –ë–î
   */
  private async loadChatSettings(): Promise<void> {
    if (!this.chatRepository) {
      this.logger.d("No database connection, skipping chat settings loading")
      return
    }

    try {
      const activeChats = await this.chatRepository.getActiveAiChats()
      for (const chat of activeChats) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º config –∏–∑ chat.config –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
        const config = (chat as any).config || null
        this.chatSettings.set(chat.id, { chat, config })
      }
      this.logger.i(`Loaded ${activeChats.length} active AI chats`)
    } catch (error) {
      this.logger.e("Error loading chat settings:", error)
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫—ç—à–∞
   */
  private async loadContextFromCache(contextId: string): Promise<ChatContext | null> {
    if (!this.redisService)
      return null

    try {
      const cached = await this.redisService.get<ChatContext>(`ai:context:${contextId}`)
      if (cached) {
        this.logger.d(`Loaded context for chat ${contextId} from cache`)
        return cached
      }
    } catch (error) {
      this.logger.e(`Error loading context ${contextId} from cache:`, error)
    }

    return null
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –∫—ç—à
   */
  private async saveContextToCache(contextId: string, context: ChatContext): Promise<void> {
    if (!this.redisService)
      return

    try {
      await this.redisService.set(
        `ai:context:${contextId}`,
        context,
        AI_CHAT_CONFIG.CONTEXT_TTL_SECONDS,
      )
      this.logger.d(`Saved context for chat ${contextId} to cache`)
    } catch (error) {
      this.logger.e(`Error saving context ${contextId} to cache:`, error)
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –≤ –∫—ç—à
   */
  private async saveAllContextsToCache(): Promise<void> {
    if (!this.redisService) {
      this.logger.d("No Redis connection, skipping context saving")
      return
    }

    try {
      const savePromises = Array.from(this.chatContexts.entries()).map(([contextId, context]) =>
        this.saveContextToCache(contextId, context),
      )

      await Promise.all(savePromises)
      this.logger.i(`Saved ${this.chatContexts.size} contexts to cache`)
    } catch (error) {
      this.logger.e("Error saving contexts to cache:", error)
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  getContextStats(contextId: string): {
    messages: number
    requestCount: number
  } | null {
    const context = this.chatContexts.get(contextId)
    if (!context)
      return null

    return {
      messages: context.messages.length,
      requestCount: context.requestCount,
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ throttling –¥–ª—è —á–∞—Ç–∞
   */
  getThrottleStats(contextId: string): {
    bucketState: { tokens: number, capacity: number }
    lastRequestTime: number
  } {
    return this.throttleManager.getChatStats(contextId)
  }

  /**
   * –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å TelegramBotService
   */
  public onMessageResponse?: (contextId: string, response: string, messageId: number, userMessageId?: number, isError?: boolean) => void
  public onTypingStart?: (contextId: string) => void
  public onTypingStop?: (contextId: string) => void

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
   */
  async getChatSettings(chatId: number): Promise<{ chat: Chat | null, config: ChatConfig | null }> {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.chatSettings.has(chatId)) {
      const cached = this.chatSettings.get(chatId)!
      return { chat: cached.chat, config: cached.config }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
    if (this.chatRepository) {
      const result = await this.chatRepository.getChatWithConfig(chatId)

      if (result.chat) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º config –∏–∑ chat.config –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
        const config = result.config || (result.chat as any).config || null
        const normalizedResult = {
          chat: result.chat,
          config,
        }

        // –ö–µ—à–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.chatSettings.set(chatId, normalizedResult)
        return normalizedResult
      }
    }

    return { chat: null, config: null }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –¥–ª—è —á–∞—Ç–∞ (–∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å null –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
   */
  async getApiKeyForChat(chatId: number): Promise<{ key: string, isReal: boolean } | null> {
    const { chat, config } = await this.getChatSettings(chatId)

    // –ï—Å–ª–∏ —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π ‚Äî –±–æ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
    if (chat?.type === "private") {
      this.logger.w(`AIChatService: –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ ${chatId} ‚Äî –∑–∞–ø—Ä–µ—â–µ–Ω–æ.`)
      return null
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π API –∫–ª—é—á –≤ –∫–æ–Ω—Ñ–∏–≥–µ —á–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (config?.geminiApiKey) {
      return {
        key: config.geminiApiKey,
        isReal: true,
      }
    }

    // API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    return null
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —á–∞—Ç–∞
   */
  async getSystemPromptForChat(chatId: number): Promise<string> {
    const { config } = await this.getChatSettings(chatId)

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (config?.systemPrompt) {
      return this.chatRepository?.buildSystemPromptString(config.systemPrompt) || AI_CHAT_CONFIG.DEFAULT_SYSTEM_PROMPT
    }

    // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    return AI_CHAT_CONFIG.DEFAULT_SYSTEM_PROMPT
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∫–ª—é—á–µ–Ω –ª–∏ –ò–ò –≤ —á–∞—Ç–µ
   */
  async isAiEnabledForChat(chatId: number): Promise<boolean> {
    const { config } = await this.getChatSettings(chatId)
    return config?.aiEnabled ?? true
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
   */
  async isChatAdmin(chatId: number, userId: number): Promise<boolean> {
    if (!this.chatRepository)
      return false
    return await this.chatRepository.isAdmin(chatId, userId)
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
   */
  async updateChatSettings(
    chatId: number,
    userId: number,
    updates: Partial<{
      geminiApiKey: string | null
      systemPrompt: SystemPromptData | null
      aiEnabled: boolean
    }>,
  ): Promise<boolean> {
    if (!this.chatRepository)
      return false

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const isAdmin = await this.isChatAdmin(chatId, userId)
    if (!isAdmin) {
      this.logger.w(`User ${userId} tried to update settings for chat ${chatId} without admin rights`)
      return false
    }

    const success = await this.chatRepository.updateChatConfig(chatId, updates)
    if (success) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      this.chatSettings.delete(chatId)
      this.logger.i(`Chat ${chatId} settings updated by user ${userId}`)
    }

    return success
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
   */
  clearChatCache(chatId: number): void {
    this.logger.d(`üîÑ Cache cleared for chat ${chatId}`)
    this.chatSettings.delete(chatId)
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
   */
  getStats(): object {
    return {
      activeContexts: this.chatContexts.size,
      queueLength: this.messageQueue.length,
      isProcessing: this.isProcessingQueue,
      activeChats: this.chatSettings.size,
      serviceStatus: "active",
    }
  }
}
