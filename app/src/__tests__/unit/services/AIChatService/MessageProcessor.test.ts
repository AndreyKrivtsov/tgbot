import { MessageProcessor } from "../../../../services/AIChatService/MessageProcessor.js"
import type { Logger } from "../../../../helpers/Logger.js"

// –ú–æ–∫–∞–µ–º Logger
const mockLogger = {
  i: jest.fn(),
  d: jest.fn(),
  w: jest.fn(),
  e: jest.fn(),
} as unknown as Logger

describe("messageProcessor", () => {
  let messageProcessor: MessageProcessor

  beforeEach(() => {
    messageProcessor = new MessageProcessor(mockLogger)
  })

  describe("isBotMention", () => {
    it("should return true for direct bot mention", () => {
      const result = messageProcessor.isBotMention("@testbot –ø—Ä–∏–≤–µ—Ç", "testbot")
      expect(result).toBe(true)
    })

    it("should return true for reply to bot message", () => {
      const result = messageProcessor.isBotMention("–ø—Ä–∏–≤–µ—Ç", undefined, true)
      expect(result).toBe(true)
    })

    it("should return true for '–∞–ª—å—Ç—Ä–æ–Ω' trigger", () => {
      const result = messageProcessor.isBotMention("–∞–ª—å—Ç—Ä–æ–Ω, –∫–∞–∫ –¥–µ–ª–∞?")
      expect(result).toBe(true)
    })

    it("should return true for '—ç–π –±–æ—Ç' trigger", () => {
      const result = messageProcessor.isBotMention("—ç–π –±–æ—Ç, –ø–æ–º–æ–≥–∏")
      expect(result).toBe(true)
    })

    it("should return false for regular message", () => {
      const result = messageProcessor.isBotMention("–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
      expect(result).toBe(false)
    })

    it("should return false for empty message", () => {
      const result = messageProcessor.isBotMention("")
      expect(result).toBe(false)
    })
  })

  describe("cleanBotMention", () => {
    it("should remove bot username from message", () => {
      const result = messageProcessor.cleanBotMention("@testbot –ø—Ä–∏–≤–µ—Ç", "testbot")
      expect(result).toBe("–ø—Ä–∏–≤–µ—Ç")
    })

    it("should remove '–∞–ª—å—Ç—Ä–æ–Ω' from message", () => {
      const result = messageProcessor.cleanBotMention("–∞–ª—å—Ç—Ä–æ–Ω, –∫–∞–∫ –¥–µ–ª–∞?")
      expect(result).toBe("–∫–∞–∫ –¥–µ–ª–∞?")
    })

    it("should remove '—ç–π –±–æ—Ç' from message", () => {
      const result = messageProcessor.cleanBotMention("—ç–π –±–æ—Ç, –ø–æ–º–æ–≥–∏")
      expect(result).toBe("–ø–æ–º–æ–≥–∏")
    })

    it("should return original message if no bot mention", () => {
      const result = messageProcessor.cleanBotMention("–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
      expect(result).toBe("–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    })
  })

  describe("processBotMention", () => {
    it("should process bot mention correctly", () => {
      const result = messageProcessor.processBotMention("@testbot –ø—Ä–∏–≤–µ—Ç", "testbot")
      expect(result).toEqual({
        isMention: true,
        cleanedMessage: "–ø—Ä–∏–≤–µ—Ç",
      })
    })

    it("should process non-mention correctly", () => {
      const result = messageProcessor.processBotMention("–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
      expect(result).toEqual({
        isMention: false,
        cleanedMessage: "–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
      })
    })
  })

  describe("prepareContextualMessage", () => {
    it("should add user info to message", () => {
      const result = messageProcessor.prepareContextualMessage(
        "—Ç–µ—Å—Ç",
        "username",
        "–ò–≤–∞–Ω",
      )
      expect(result).toEqual({
        content: "[–∏–º—è: –ò–≤–∞–Ω, @username]: —Ç–µ—Å—Ç",
        hasUserInfo: true,
      })
    })

    it("should work with only username", () => {
      const result = messageProcessor.prepareContextualMessage("—Ç–µ—Å—Ç", "username")
      expect(result).toEqual({
        content: "[@username]: —Ç–µ—Å—Ç",
        hasUserInfo: true,
      })
    })

    it("should work with only first name", () => {
      const result = messageProcessor.prepareContextualMessage("—Ç–µ—Å—Ç", undefined, "–ò–≤–∞–Ω")
      expect(result).toEqual({
        content: "[–∏–º—è: –ò–≤–∞–Ω]: —Ç–µ—Å—Ç",
        hasUserInfo: true,
      })
    })

    it("should work without user info", () => {
      const result = messageProcessor.prepareContextualMessage("—Ç–µ—Å—Ç")
      expect(result).toEqual({
        content: "—Ç–µ—Å—Ç",
        hasUserInfo: false,
      })
    })
  })

  describe("validateMessage", () => {
    it("should validate normal message", () => {
      const result = messageProcessor.validateMessage("–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
      expect(result).toEqual({
        isValid: true,
      })
    })

    it("should reject empty message", () => {
      const result = messageProcessor.validateMessage("")
      expect(result).toEqual({
        isValid: false,
        reason: "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ",
      })
    })

    it("should reject too long message", () => {
      const longMessage = "–∞".repeat(5000)
      const result = messageProcessor.validateMessage(longMessage)
      expect(result).toEqual({
        isValid: false,
        reason: "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ",
      })
    })

    it("should reject spam message", () => {
      const spamMessage = "–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞"
      const result = messageProcessor.validateMessage(spamMessage)
      expect(result).toEqual({
        isValid: false,
        reason: "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∞–º",
      })
    })
  })

  describe("getMessageStats", () => {
    it("should return correct stats", () => {
      const result = messageProcessor.getMessageStats("–ü—Ä–∏–≤–µ—Ç –º–∏—Ä! https://example.com üòä")
      expect(result).toEqual({
        length: 34,
        wordCount: 3,
        hasEmojis: true,
        hasLinks: true,
      })
    })

    it("should detect no emojis or links", () => {
      const result = messageProcessor.getMessageStats("–ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
      expect(result).toEqual({
        length: 17,
        wordCount: 2,
        hasEmojis: false,
        hasLinks: false,
      })
    })
  })

  describe("extractCommands", () => {
    it("should extract commands from message", () => {
      const result = messageProcessor.extractCommands("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏ /help")
      expect(result).toEqual(["/start", "/help"])
    })

    it("should return empty array if no commands", () => {
      const result = messageProcessor.extractCommands("–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
      expect(result).toEqual([])
    })
  })

  describe("hasUserMentions", () => {
    it("should detect user mentions", () => {
      const result = messageProcessor.hasUserMentions("–ü—Ä–∏–≤–µ—Ç @username")
      expect(result).toBe(true)
    })

    it("should return false if no mentions", () => {
      const result = messageProcessor.hasUserMentions("–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
      expect(result).toBe(false)
    })
  })
})
