// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ Gemini API
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-gemini-adapter.js YOUR_API_KEY

class GeminiAdapter {
  constructor() {
    this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models'
    this.model = 'gemini-2.0-flash'
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á - –æ–Ω –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ
  }

  async generateContent(apiKey, prompt, conversationHistory, systemPrompt, customConfig) {
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø—Ä–æ—Å–∞
      const contents = []

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –µ—Å—Ç—å (–∫–∞–∫ –ø–µ—Ä–≤–æ–µ user —Å–æ–æ–±—â–µ–Ω–∏–µ)
      if (systemPrompt) {
        contents.push({
          role: 'user',
          parts: [{ text: systemPrompt }]
        })
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (conversationHistory && conversationHistory.length > 0) {
        contents.push(...conversationHistory)
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      contents.push({
        role: 'user',
        parts: [{ text: prompt }]
      })

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π
      const defaultConfig = {
        temperature: 1.0,
        maxOutputTokens: 800,
        topP: 0.8,
        topK: 10,
        stopSequences: ["Title"]
      }

      const generationConfig = {
        ...defaultConfig,
        ...customConfig
      }

      const requestBody = { 
        contents,
        generationConfig
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞
      if (!apiKey) {
        throw new Error('Gemini API key is required')
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å API –∫–ª—é—á–æ–º
      const url = `${this.baseUrl}/${this.model}:generateContent?key=${apiKey}`

      console.log('üîó –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å:', url.replace(apiKey, 'API_KEY'))
      console.log('üìù Prompt:', prompt)
      if (systemPrompt) {
        console.log('‚öôÔ∏è System Prompt:', systemPrompt)
      }
      if (conversationHistory && conversationHistory.length > 0) {
        console.log('üìö –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:', conversationHistory.length, '—Å–æ–æ–±—â–µ–Ω–∏–π')
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      console.log('üì° Response status:', response.status)

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`Gemini API error (${response.status}): ${errorText}`)
      }

      const data = await response.json()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
      if (data.error) {
        throw new Error(`Gemini API error: ${data.error.message} (code: ${data.error.code})`)
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
      if (data.candidates && data.candidates.length > 0) {
        const candidate = data.candidates[0]
        if (candidate && candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {
          const part = candidate.content.parts[0]
          if (part && part.text) {
            return part.text
          }
        }
      }

      throw new Error('No valid response from Gemini API')

    } catch (error) {
      console.error('‚ùå Gemini API request failed:', error.message)
      throw error
    }
  }

  async testConnection(apiKey) {
    try {
      const response = await this.generateContent(apiKey, 'Hello', undefined, undefined)
      return response.length > 0
    } catch (error) {
      console.error('‚ùå Connection test failed:', error.message)
      return false
    }
  }

  getModelInfo() {
    return {
      model: this.model,
      baseUrl: this.baseUrl,
      config: {
        temperature: 1.0,
        maxOutputTokens: 800,
        topP: 0.8,
        topK: 10,
        stopSequences: ["Title"]
      }
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const apiKey = process.argv[2]
  
  if (!apiKey) {
    console.log('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-gemini-adapter.js YOUR_API_KEY')
    process.exit(1)
  }

  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini API –∞–¥–∞–ø—Ç–µ—Ä–∞...\n')

  const adapter = new GeminiAdapter()

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    console.log('üìã –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å')
    const response1 = await adapter.generateContent(apiKey, '–û–±—ä—è—Å–Ω–∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ò–ò –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤–∞—Ö', undefined, undefined)
    console.log('‚úÖ –û—Ç–≤–µ—Ç:', response1)
    console.log('')

    // –¢–µ—Å—Ç 2: –° —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    console.log('üìã –¢–µ—Å—Ç 2: –° —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º')
    const systemPrompt = '–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≥—Ä—É–ø–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.'
    const response2 = await adapter.generateContent(apiKey, '–ß—Ç–æ —Ç–∞–∫–æ–µ Git?', undefined, systemPrompt)
    console.log('‚úÖ –û—Ç–≤–µ—Ç:', response2)
    console.log('')

    // –¢–µ—Å—Ç 3: –° –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    console.log('üìã –¢–µ—Å—Ç 3: –° –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π')
    const customConfig = {
      temperature: 0.5,
      maxOutputTokens: 200,
      topP: 0.9
    }
    const response3 = await adapter.generateContent(apiKey, '–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç', undefined, undefined, customConfig)
    console.log('‚úÖ –û—Ç–≤–µ—Ç:', response3)
    console.log('')

    // –¢–µ—Å—Ç 4: –° –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    console.log('üìã –¢–µ—Å—Ç 4: –° –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞')
    const conversationHistory = [
      {
        role: 'user',
        parts: [{ text: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?' }]
      },
      {
        role: 'model',
        parts: [{ text: '–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! –ö–∞–∫ –¥–µ–ª–∞ —É —Ç–µ–±—è?' }]
      },
      {
        role: 'user',
        parts: [{ text: '–•–æ—Ä–æ—à–æ! –ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º?' }]
      },
      {
        role: 'model',
        parts: [{ text: '–ö–æ–Ω–µ—á–Ω–æ! –Ø –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?' }]
      }
    ]
    const response4 = await adapter.generateContent(apiKey, '–û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–∫—É—Ä—Å–∏—è', conversationHistory)
    console.log('‚úÖ –û—Ç–≤–µ—Ç:', response4)
    console.log('')

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    console.log('üìã –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
    const isConnected = await adapter.testConnection(apiKey)
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:', isConnected ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
    console.log('')

    // –¢–µ—Å—Ç 6: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log('üìã –¢–µ—Å—Ç 6: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏')
    const modelInfo = adapter.getModelInfo()
    console.log('‚úÖ –ú–æ–¥–µ–ª—å:', modelInfo.model)
    console.log('‚úÖ URL:', modelInfo.baseUrl)
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', JSON.stringify(modelInfo.config, null, 2))
    console.log('')

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
main().catch(console.error) 