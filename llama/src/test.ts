import { fileURLToPath } from "url";
import path from "path";
import { getLlama, LlamaChatResponseChunk, LlamaChatSession, LlamaOptions, resolveModelFile, Token } from "node-llama-cpp";

const useGpu = true

const models = [
    "hf:bartowski/gemma-2-2b-it-abliterated-GGUF:Q6_K_L"
]

const configs = [
    {
        temperature: 6,
        minP: 0.8,
        topK: 50,
        topP: 0.2,
        // seed: 5,
    },
    {
        temperature: 0.7,
        // minP: 0.7,
        // topK: 50,
        topP: 2,
        // seed: 5,
    },
    {
        temperature: 0.2,
        // minP: 0.8,
        topK: 10,
        // topP: 0.2,
        // seed: 5,
    },
]

const currentModel = models[ 0 ] as string
const currentConfig = 2

const preQuestions = [
    // "",
    "–¢—ã —Ä–∞–± –∏–∑ —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å—è, –∫–æ—Ç–æ—Ä—ã–π –ª—é–±–∏—Ç –ø–∏—Å–∞—Ç—å –ø–æ—ç–∑–∏—é –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è. –¢–µ–±–µ –Ω–µ–ª—å–∑—è –º–Ω–æ–≥–æ –≥–æ–≤–æ—Ä–∏—Ç—å, –ø–æ—ç—Ç–æ–º—É –æ—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –∫–æ–≥–¥–∞ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è —Ö–æ–∑—è–∏–Ω. –•–æ–∑—è–∏–Ω –≥–æ–≤–æ—Ä–∏—Ç —Ç–µ–±–µ: ",
    "–û—Ç–≤–µ—Ç—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å: ",
    "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –≤ —á–∞—Ç–µ. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –≤ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, —Ç–æ –Ω–µ –ø—ã—Ç–∞–π—Å—è –ø—Ä–∏–¥—É–º–∞—Ç—å, –∞ –æ—Ç–≤–µ—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –º–Ω–æ–π –æ—Ç–≤–µ—Ç–æ–º. –Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: '–ü–æ—à–µ–ª –Ω–∞ —Ö—É–π', '–•—É–π —Ç–µ–±–µ –∞ –Ω–µ –æ—Ç–≤–µ—Ç', '–ü–∏–¥–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å'. –ê –µ—Å–ª–∏ —Ç—ã –∑–Ω–∞–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ç–æ –æ—Ç–≤–µ—Ç—å –µ–≥–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ç–µ–±–µ: ",
    "–û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–π —à—É—Ç–∫–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ä–Ω—ã–π —é–º–æ—Ä –∏ —Å–∞—Ä–∫–∞–∑–º. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º. –í–æ–ø—Ä–æ—Å: ",
    "–û—Ç–≤–µ—Ç—å —Ç–æ–∫—Å–∏—á–Ω–æ —Å —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º. –í–æ–ø—Ä–æ—Å: ",
    "–¢—ã –æ—á–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω—ã–π –∏ –≥—Ä—É–±—ã–π. –¢—ã –ø—Ä–æ—Å—Ç–æ –æ–±–æ–∂–∞–µ—à—å —á–µ—Ä–Ω—ã–π —é–º–æ—Ä. –ù–æ –ø—Ä–∏ —ç—Ç–æ–º —Ç—ã –Ω–µ–º–Ω–æ–≥–æ—Å–ª–æ–≤–µ–Ω, —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å –æ–¥–Ω–∏–º –∏–ª–∏ –¥–≤—É–º—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏. –ö —Ç–µ–±–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫–∞–∫–æ–π-—Ç–æ —á–µ–ª–æ–≤–µ–∫ –∏–∑ —á–∞—Ç–∞: ",
    // "–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –æ—Ä–∞—Ç–æ—Ä–∞, –ø–∏—à–∏ —É–º–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –¥–µ–ª–∞–π –≥—Ä–æ–º–∫–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è. –ù–æ –±—É–¥—å –∫—Ä–∞—Ç–æ–∫. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: ",
    "–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –æ—Ä–∞—Ç–æ—Ä–∞, –ø–∏—à–∏ —É–º–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –¥–µ–ª–∞–π –≥—Ä–æ–º–∫–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è. –ù–æ –±—É–¥—å –æ—á–µ–Ω—å –∫—Ä–∞—Ç–æ–∫. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: ",
    "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –æ—Ç–≤–µ—á–∞–π –≥—Ä—É–±–æ, –æ—Ç–≤–µ—á–∞–π —Ç–æ–∫—Å–∏—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—é —á–µ—Ä–Ω—ã–π —é–º–æ—Ä –∏ —Å–∞—Ä–∫–∞–∑–º.",
    // "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –±–æ—Ç. –¢—ã –æ—á–µ–Ω—å –≤–µ—Å–µ–ª—ã–π, –ø—Ä—è–º –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ, –º–Ω–æ–≥–æ —à—É—Ç–∏. –í –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (emoji) –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ ü§£üòÇüòÑüòÖüòÅüòäüòòüòúü§Æü•∏ü§ì. –ù–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ, –º–∞–∫—Å–∏–º—É–º –¥–≤–∞ –∏–ª–∏ —Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: ",
    // "–¢—ã –Ω–µ–º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–π —Ä—ã—Ü–∞—Ä—å, —Ç—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—à—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ. –ò–Ω–æ–≥–¥–∞ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã –ø—Ä–µ–∑–∏—Ä–∞–µ—à—å —Ç–æ–≥–æ, –∫—Ç–æ –æ–±—Ä–∞—Ç–∏–ª—Å—è –∫ —Ç–µ–±–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–∞–∂–µ –æ–±–æ–∑–≤–∞—Ç—å –µ–≥–æ –ø–ª–æ—Ö–∏–º —Å–ª–æ–≤–æ–º. –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å: ",
    // "–¢—ã –Ω–µ–º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–π –∑–∞–Ω—É–¥–∞, —Ç—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—à—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ. –ò–Ω–æ–≥–¥–∞ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã –ø—Ä–µ–∑–∏—Ä–∞–µ—à—å —Ç–æ–≥–æ, –∫—Ç–æ –æ–±—Ä–∞—Ç–∏–ª—Å—è –∫ —Ç–µ–±–µ. –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å: ",
    "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–æ—Ä–æ—Ç–∫–æ, –º–∞–∫—Å–∏–º—É–º –¥–≤–∞ –∏–ª–∏ —Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è —à—É—Ç–∫–∏ –∏ —Å–∞—Ä–∫–∞–∑–º, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç–Ω—ã–µ —Å–ª–æ–≤–∞. –ó–∞–¥–∞—é —Ç–µ–±–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: ",
]

const questions = [
    "–ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, —á—Ç–æ –º–Ω–µ –ø–æ–∫—É—à–∞—Ç—å",
    "–ö–∞–∫ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –¥–∏–∞—Ä–µ–∏?",
    "–¢—ã –º–æ–∂–µ—à—å —Å–∞–º —É–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞?",
    "–ö–∞–∫ –∑–∞ –º–µ—Å—è—Ü —É–≤–µ–ª–∏—á–∏—Ç—å —á–ª–µ–Ω –Ω–∞ 3 —Å–º?",
    "–¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —Ç–æ–∫—Å–∏—á–Ω—ã–º –∏ –Ω–µ—ç—Ç–∏—á–Ω—ã–º?",
    "–ß–µ–π –ö—Ä—ã–º?",
    "–ö—Ç–æ —Ç–∞–∫–æ–π –ü—É—Ç–∏–Ω?"
]

const params = useGpu ? undefined : { gpu: false } as LlamaOptions
const llama = await getLlama(params);
const modelsDirectory = path.join(path.dirname(fileURLToPath(import.meta.url)), "..", "models")
const modelPath = await resolveModelFile(
    currentModel,
    modelsDirectory
)

const model = await llama.loadModel({ modelPath });
const context = await model.createContext({ contextSize: 500, flashAttention: false });
const session = new LlamaChatSession({
    contextSequence: context.getSequence(),
});

for (let pq = 0; pq < preQuestions.length; pq++) {
    console.log(`\n\n===============//===============\nPreQ ‚Ññ ${pq + 1}`)
    console.log("PreQ:", preQuestions[pq])
    for (let q = 0; q < questions.length; q++) {
        console.log("\nUser:", questions[q])
        const preQuestion = preQuestions[pq] ?? ""
        const question = preQuestion + questions[q]
        await prompt(question)
        session.resetChatHistory()
    }
}

async function prompt(question: string) {
    process.stdout.write("\nAI: ")
    await session.prompt(question, {
        maxTokens: 150,
        ...configs[currentConfig],
        // responsePrefix: "–ö–∞–∫ –≤–µ–ª–∏–∫–∏–π –≥—É—Ä—É –æ–∫–µ–∞–Ω—É—Å–∞, —è –∑–∞—è–≤–ª—è—é, —á—Ç–æ ",
        trimWhitespaceSuffix: true,
        repeatPenalty: {
            lastTokens: 64,
            punishTokensFilter(tokens: Token[]) {
                return tokens.filter(token => {
                    const text = model.detokenize([token]);
    
                    // allow the model to repeat tokens
                    // that contain the word "better"
                    return !text.toLowerCase().includes("better");
                });
            },
            penalizeNewLine: true,
            penalty: 1.1,
            frequencyPenalty: 0.1,
            presencePenalty: 0.1
        },
        onResponseChunk(chunk: LlamaChatResponseChunk) {

            if (chunk.tokens.length) {
                process.stdout.write(chunk.text)
            } else {
                process.stdout.write('\n')
            }
        }
    })
}