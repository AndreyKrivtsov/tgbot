services:
  # AntiSpam Service - сервис проверки спама на Python/FastAPI (продакшен)
  antispam:
    build:
      context: services/antispam
      dockerfile: Dockerfile
    container_name: antispam-prod
    restart: always
    ports:
      - "127.0.0.1:6323:6323"  # Только localhost в продакшене
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6323/docs", "||", "exit", "1"]
      interval: 100s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network-prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'


  # PostgreSQL - основная база данных (продакшен)
  postgres:
    image: postgres:15-alpine
    container_name: app-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-tgbot}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "127.0.0.1:5432:5432"  # Только localhost
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - ./postgres/postgresql.production.conf:/etc/postgresql/postgresql.conf:ro
      - postgres_logs:/var/log/postgresql
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c ssl=off
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-tgbot}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network-prod
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis - кэширование (продакшен)
  redis:
    image: redis:7-alpine
    container_name: app-redis-prod
    restart: always
    ports:
      - "127.0.0.1:6379:6379"  # Только localhost
    volumes:
      - redis_data_prod:/data
      - ./redis/redis.production.conf:/usr/local/etc/redis/redis.conf:ro
      - redis_logs:/var/log/redis
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network-prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # bot:
  #   build:
  #     context: ../app
  #     dockerfile: Dockerfile
  #   container_name: tgbot-bot-prod
  #   restart: always
  #   environment:
  #     - NODE_ENV=production
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     # antispam:
  #     #   condition: service_healthy
  #   command: sh -c "sleep 10 && npm start"
  #   networks:
  #     - app-network-prod
  #   dns:
  #     - 8.8.8.8
  #     - 1.1.1.1

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  postgres_logs:
    driver: local
  redis_logs:
    driver: local
  nginx_logs:
    driver: local
  # prometheus_data:
  #   driver: local
  # grafana_data:
  #   driver: local

networks:
  app-network-prod:
    name: app-network-prod
    driver: bridge

  # Nginx для reverse proxy (опционально)
  # nginx:
  #   image: nginx:alpine
  #   container_name: tgbot-nginx-prod
  #   restart: always
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #     - nginx_logs:/var/log/nginx
  #   depends_on:
  #     - postgres
  #     - redis
  #   networks:
  #     - tgbot-network-prod
  #   profiles:
  #     - proxy



  # PostgreSQL Exporter для метрик
  # postgres-exporter:
  #   image: quay.io/prometheuscommunity/postgres-exporter:latest
  #   container_name: tgbot-postgres-exporter
  #   restart: always
  #   environment:
  #     DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-tgbot}?sslmode=disable"
  #   ports:
  #     - "127.0.0.1:9187:9187"
  #   depends_on:
  #     - postgres
  #   networks:
  #     - tgbot-network-prod
  #   profiles:
  #     - monitoring

  # Redis Exporter для метрик
  # redis-exporter:
  #   image: oliver006/redis_exporter:latest
  #   container_name: tgbot-redis-exporter
  #   restart: always
  #   environment:
  #     REDIS_ADDR: "redis://redis:6379"
  #   ports:
  #     - "127.0.0.1:9121:9121"
  #   depends_on:
  #     - redis
  #   networks:
  #     - tgbot-network-prod
  #   profiles:
  #     - monitoring