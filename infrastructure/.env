# ==============================================
# INFRASTRUCTURE ENVIRONMENT VARIABLES
# ==============================================
# Скопируйте этот файл в .env и заполните значения:
# cp env.example .env

# ==============================================
# POSTGRESQL SETTINGS
# ==============================================
POSTGRES_PASSWORD=111111
POSTGRES_USER=postgres
POSTGRES_DB=tgbot

# ==============================================
# PGADMIN SETTINGS (для веб-интерфейса)
# ==============================================
PGADMIN_EMAIL=tg@bot.com
PGADMIN_PASSWORD=111111

# ==============================================
# REDIS SETTINGS
# ==============================================
# Для продакшена рекомендуется установить пароль в redis.conf:
# requirepass your_redis_password_here

# ==============================================
# DOCKER COMPOSE PROFILES
# ==============================================
# Для запуска с дополнительными инструментами:
# docker-compose --profile tools up -d

# ==============================================
# CONNECTION STRINGS ДЛЯ ПРИЛОЖЕНИЯ
# ==============================================
# Используйте эти строки подключения в вашем приложении:

# PostgreSQL connection (изнутри Docker сети):
# DATABASE_URL=postgresql://postgres:your_secure_postgres_password_here@postgres:5432/tgbot

# PostgreSQL connection (с хоста):
# DATABASE_URL=postgresql://postgres:your_secure_postgres_password_here@localhost:5432/tgbot

# Redis connection (изнутри Docker сети):
# REDIS_URL=redis://redis:6379/0

# Redis connection (с хоста):
# REDIS_URL=redis://localhost:6379/0

# ==============================================
# PORTS MAPPING
# ==============================================
# PostgreSQL: localhost:5432
# Redis: localhost:6379
# pgAdmin: localhost:8080
# Redis Commander: localhost:8081

# ==============================================
# PRODUCTION NOTES
# ==============================================
# 1. Обязательно смените пароли!
# 2. Для продакшена используйте отдельный docker-compose.production.yml
# 3. Настройте SSL/TLS для внешних подключений
# 4. Используйте Docker secrets для паролей
# 5. Настройте резервное копирование PostgreSQL
# 6. Мониторьте использование ресурсов 